{
  "openapi": "3.0.0",
  "info": {
    "title": "POC3 Service Builder API",
    "version": "1.0.0"
  },
  "paths": {},
  "components": {},
  "x-business-logic": [
    {
      "businessLogic": {
        "design": [
          {
            "element": "Retrieve customer account transactions",
            "pseudocode": "Retrieve all transactions associated with the customer's account\nInclude transaction details such as date, amount, type, and description",
            "standard": "OpenAPI"
          },
          {
            "element": "Update account balances",
            "pseudocode": "Calculate the new balance by summing up all transaction amounts\nUpdate the account balance with the new calculated value",
            "standard": "BIAN"
          },
          {
            "element": "Review customer information",
            "pseudocode": "Retrieve and display customer details such as name, address, contact information\nVerify the accuracy of the customer information",
            "standard": "ISO"
          },
          {
            "element": "Review product group information",
            "pseudocode": "Retrieve information about the product group associated with the account\nDisplay details such as product type, features, and restrictions",
            "standard": "BIAN"
          },
          {
            "element": "Identify applicable interest rates",
            "pseudocode": "Retrieve the current interest rates applicable to the account\nDetermine the appropriate interest rate based on account type and balance",
            "standard": "ISO"
          },
          {
            "element": "Calculate monthly interest",
            "pseudocode": "Apply the monthly interest rate to the account balance\nCalculate the interest amount for the current month",
            "standard": "OpenAPI"
          },
          {
            "element": "Calculate cumulative interest",
            "pseudocode": "Sum up all monthly interest amounts from previous months\nCalculate the total cumulative interest earned on the account",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Retrieve customer account transactions\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve all transactions associated with the customer's account\",\n            \"Include transaction details such as date, amount, type, and description\"\n        ]\n    },\n    {\n        \"element\": \"Update account balances\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Calculate the new balance by summing up all transaction amounts\",\n            \"Update the account balance with the new calculated value\"\n        ]\n    },\n    {\n        \"element\": \"Review customer information\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Retrieve and display customer details such as name, address, contact information\",\n            \"Verify the accuracy of the customer information\"\n        ]\n    },\n    {\n        \"element\": \"Review product group information\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Retrieve information about the product group associated with the account\",\n            \"Display details such as product type, features, and restrictions\"\n        ]\n    },\n    {\n        \"element\": \"Identify applicable interest rates\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Retrieve the current interest rates applicable to the account\",\n            \"Determine the appropriate interest rate based on account type and balance\"\n        ]\n    },\n    {\n        \"element\": \"Calculate monthly interest\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Apply the monthly interest rate to the account balance\",\n            \"Calculate the interest amount for the current month\"\n        ]\n    },\n    {\n        \"element\": \"Calculate cumulative interest\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Sum up all monthly interest amounts from previous months\",\n            \"Calculate the total cumulative interest earned on the account\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. Retrieve all transactions for the given card number\n    - Query database for transactions related to the specified card number\n2. For each transaction, calculate interest based on balance, daily rate, and days since the transaction date\n    - Iterate through each transaction\n    - Calculate the number of days since the transaction date\n    - Calculate interest amount using the formula: balance * daily rate * days\n3. Display the card number and calculated interest for each transaction\n    - Output the card number and corresponding calculated interest for each transaction",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve all transactions for the given card number\",\n                \"actions\": [\n                    \"Query database for transactions related to the specified card number\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"For each transaction, calculate interest based on balance, daily rate, and days since the transaction date\",\n                \"actions\": [\n                    \"Iterate through each transaction\",\n                    \"Calculate the number of days since the transaction date\",\n                    \"Calculate interest amount using the formula: balance * daily rate * days\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Display the card number and calculated interest for each transaction\",\n                \"actions\": [\n                    \"Output the card number and corresponding calculated interest for each transaction\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "processTransactionRecord",
            "pseudocode": "1. Calculate the number of days since the transaction date\n2. Determine if the previous payment was made in full\n3. Calculate the interest amount",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"processTransactionRecord\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Calculate the number of days since the transaction date\",\n                \"logic\": \"Get current date and time, subtract transaction date to get the number of days\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Determine if the previous payment was made in full\",\n                \"logic\": \"Check if the previous payment amount equals the total transaction amount\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Calculate the interest amount\",\n                \"logic\": \"Calculate interest based on balance, daily rate, and days since the transaction\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Process Transaction Records",
            "pseudocode": "1. Retrieve transaction records from the database\n2. Iterate through each transaction record\n3. Calculate days since the transaction\n4. Determine interest based on APR and transaction details\n5. Update transaction record with calculated interest",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Process Transaction Records\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve transaction records from the database\",\n                \"action\": \"Query database for transaction records\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Iterate through each transaction record\",\n                \"action\": \"For each transaction record in the retrieved list:\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Calculate days since the transaction\",\n                \"action\": \"Calculate the number of days since the transaction date\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Determine interest based on APR and transaction details\",\n                \"action\": \"Based on the APR and transaction details, calculate the interest amount\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Update transaction record with calculated interest\",\n                \"action\": \"Update the transaction record in the database with the calculated interest amount\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. For each transaction, calculate the number of days since the transaction date\n    - Get the transaction date\n    - Get the current date\n    - Calculate the difference in days between the transaction date and current date\n2. Check if the previous payment was made in full for each transaction\n    - Get the previous payment amount\n    - Get the transaction amount\n    - Compare the previous payment amount with the transaction amount to determine if it was paid in full\n3. Calculate interest based on balance, daily rate, and days since the transaction date\n    - Get the balance for the transaction\n    - Get the daily interest rate\n    - Calculate interest using the formula: interest = balance * daily rate * days\n4. Display the card number and calculated interest for each transaction\n    - Retrieve the card number associated with the transaction\n    - Display the card number and calculated interest for the transaction",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"For each transaction, calculate the number of days since the transaction date\",\n                \"actions\": [\n                    \"Get the transaction date\",\n                    \"Get the current date\",\n                    \"Calculate the difference in days between the transaction date and current date\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Check if the previous payment was made in full for each transaction\",\n                \"actions\": [\n                    \"Get the previous payment amount\",\n                    \"Get the transaction amount\",\n                    \"Compare the previous payment amount with the transaction amount to determine if it was paid in full\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Calculate interest based on balance, daily rate, and days since the transaction date\",\n                \"actions\": [\n                    \"Get the balance for the transaction\",\n                    \"Get the daily interest rate\",\n                    \"Calculate interest using the formula: interest = balance * daily rate * days\"\n                ]\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Display the card number and calculated interest for each transaction\",\n                \"actions\": [\n                    \"Retrieve the card number associated with the transaction\",\n                    \"Display the card number and calculated interest for the transaction\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Read transaction records from 'TXN.DAT' file",
            "pseudocode": "Open 'TXN.DAT' file for reading\nLoop through each transaction record in the file\nExtract transaction details like card number, balance, daily rate, and transaction date",
            "standard": "ISO"
          },
          {
            "element": "Calculate daily interest",
            "pseudocode": "For each transaction record:\nCalculate days since the transaction date\nCalculate daily interest using the formula: daily interest = balance * daily rate * days\nDisplay card number and calculated interest",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Read transaction records from 'TXN.DAT' file\",\n        \"standard\": \"ISO 2709:2008\",\n        \"pseudocode\": [\n            \"Open 'TXN.DAT' file for reading\",\n            \"Loop through each transaction record in the file\",\n            \"Extract transaction details like card number, balance, daily rate, and transaction date\"\n        ]\n    },\n    {\n        \"element\": \"Calculate daily interest\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            \"For each transaction record:\",\n            \"Calculate days since the transaction date\",\n            \"Calculate daily interest using the formula: daily interest = balance * daily rate * days\",\n            \"Display card number and calculated interest\"\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate daily interest for credit card transactions",
            "pseudocode": "Read transaction records from 'TXN.DAT' file\nGet the current system date\nCalculate the daily interest rate based on the annual percentage rate (APR)\nFor each transaction record:\n- Calculate the number of days since the transaction\n- Calculate the interest amount using the daily interest rate and days since transaction\n- Check if the previous payment was made in full:\n- If yes, set interest amount to zero\n- Output the transaction record with calculated interest amount\nStop the program when all transaction records have been processed",
            "standard": "ISO"
          },
          {
            "element": "Read transaction records from 'TXN.DAT' file",
            "pseudocode": "Open 'TXN.DAT' file for reading\nLoop until end of file:\n- Read a transaction record\n- Process the transaction record",
            "standard": "OpenAPI"
          },
          {
            "element": "Calculate daily interest rate based on APR",
            "pseudocode": "Get the annual percentage rate (APR)\nCalculate the daily interest rate = (APR / 365)",
            "standard": "BIAN"
          },
          {
            "element": "Calculate interest amount for each transaction record",
            "pseudocode": "For each transaction record:\n- Calculate the number of days since the transaction\n- Calculate the interest amount = (daily interest rate * days since transaction)",
            "standard": "ISO"
          },
          {
            "element": "Handle cases where previous payment was made in full",
            "pseudocode": "Check if the previous payment was made in full for the transaction record\nIf yes, set interest amount to zero",
            "standard": "OpenAPI"
          },
          {
            "element": "Stop the program when all transaction records have been processed",
            "pseudocode": "Check if all transaction records have been processed\nIf yes, stop the program",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate daily interest for credit card transactions\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            \"Read transaction records from 'TXN.DAT' file\",\n            \"Get the current system date\",\n            \"Calculate the daily interest rate based on the annual percentage rate (APR)\",\n            \"For each transaction record:\",\n            \"   - Calculate the number of days since the transaction\",\n            \"   - Calculate the interest amount using the daily interest rate and days since transaction\",\n            \"   - Check if the previous payment was made in full:\",\n            \"       - If yes, set interest amount to zero\",\n            \"   - Output the transaction record with calculated interest amount\",\n            \"Stop the program when all transaction records have been processed\"\n        ]\n    },\n    {\n        \"element\": \"Read transaction records from 'TXN.DAT' file\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Open 'TXN.DAT' file for reading\",\n            \"Loop until end of file:\",\n            \"   - Read a transaction record\",\n            \"   - Process the transaction record\"\n        ]\n    },\n    {\n        \"element\": \"Calculate daily interest rate based on APR\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Get the annual percentage rate (APR)\",\n            \"Calculate the daily interest rate = (APR / 365)\"\n        ]\n    },\n    {\n        \"element\": \"Calculate interest amount for each transaction record\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            \"For each transaction record:\",\n            \"   - Calculate the number of days since the transaction\",\n            \"   - Calculate the interest amount = (daily interest rate * days since transaction)\"\n        ]\n    },\n    {\n        \"element\": \"Handle cases where previous payment was made in full\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Check if the previous payment was made in full for the transaction record\",\n            \"If yes, set interest amount to zero\"\n        ]\n    },\n    {\n        \"element\": \"Stop the program when all transaction records have been processed\",\n        \"standard\": \"ISO 2709\",\n        \"pseudocode\": [\n            \"Check if all transaction records have been processed\",\n            \"If yes, stop the program\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Read transaction records from 'TXN.DAT' file",
            "pseudocode": "Open 'TXN.DAT' file for reading\nLoop through each transaction record in the file\nExtract transaction details like transaction amount, date, etc.",
            "standard": "ISO"
          },
          {
            "element": "Calculate daily interest rate based on APR and current date",
            "pseudocode": "Get the annual percentage rate (APR) for credit card transactions\nCalculate daily interest rate = (APR / 365) * 100\nGet the current system date\nCalculate the number of days since each transaction",
            "standard": "ISO"
          },
          {
            "element": "Calculate interest amount for each transaction record",
            "pseudocode": "For each transaction record:\nIf previous payment was made in full:\nSet interest amount to zero\nElse:\nCalculate interest amount = transaction amount * daily interest rate * number of days since transaction",
            "standard": "BIAN"
          },
          {
            "element": "Handle cases where previous payment was made in full",
            "pseudocode": "Check if the previous payment for the transaction was made in full\nIf yes, set the interest amount to zero for that transaction",
            "standard": "ISO"
          },
          {
            "element": "Stop the program when all transaction records have been processed",
            "pseudocode": "Check if all transaction records have been processed\nIf yes, stop the program",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Read transaction records from 'TXN.DAT' file\",\n        \"standard\": \"ISO 2709:2008\",\n        \"pseudocode\": [\n            \"Open 'TXN.DAT' file for reading\",\n            \"Loop through each transaction record in the file\",\n            \"Extract transaction details like transaction amount, date, etc.\"\n        ]\n    },\n    {\n        \"element\": \"Calculate daily interest rate based on APR and current date\",\n        \"standard\": \"ISO 8601:2004\",\n        \"pseudocode\": [\n            \"Get the annual percentage rate (APR) for credit card transactions\",\n            \"Calculate daily interest rate = (APR / 365) * 100\",\n            \"Get the current system date\",\n            \"Calculate the number of days since each transaction\"\n        ]\n    },\n    {\n        \"element\": \"Calculate interest amount for each transaction record\",\n        \"standard\": \"Bian Open API\",\n        \"pseudocode\": [\n            \"For each transaction record:\",\n            \"If previous payment was made in full:\",\n            \"   Set interest amount to zero\",\n            \"Else:\",\n            \"   Calculate interest amount = transaction amount * daily interest rate * number of days since transaction\"\n        ]\n    },\n    {\n        \"element\": \"Handle cases where previous payment was made in full\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            \"Check if the previous payment for the transaction was made in full\",\n            \"If yes, set the interest amount to zero for that transaction\"\n        ]\n    },\n    {\n        \"element\": \"Stop the program when all transaction records have been processed\",\n        \"standard\": \"Open API Specification\",\n        \"pseudocode\": [\n            \"Check if all transaction records have been processed\",\n            \"If yes, stop the program\"\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Daily Interest Rate",
            "pseudocode": "1. Get the current system date\n2. Calculate the number of days since each transaction\n3. Calculate the daily interest rate based on the APR and the number of days\n4. Return the daily interest rate",
            "standard": "ISO"
          },
          {
            "element": "Read Transaction Records from 'TXN.DAT' File",
            "pseudocode": "1. Open the 'TXN.DAT' file for reading\n2. Read each transaction record from the file\n3. Close the file after reading all transaction records",
            "standard": "OpenAPI"
          },
          {
            "element": "Calculate Interest Amount for Each Transaction Record",
            "pseudocode": "1. For each transaction record, calculate the interest amount using the daily interest rate\n2. Update the transaction record with the calculated interest amount",
            "standard": "BIAN"
          },
          {
            "element": "Handle Cases Where Previous Payment Was Made in Full",
            "pseudocode": "1. Check if the previous payment for the transaction was made in full\n2. If yes, set the interest amount for that transaction record to zero",
            "standard": "ISO"
          },
          {
            "element": "Stop Program When All Transaction Records Processed",
            "pseudocode": "1. Check if all transaction records have been processed\n2. If yes, stop the program",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Daily Interest Rate\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": \"1. Get the current system date\\n2. Calculate the number of days since each transaction\\n3. Calculate the daily interest rate based on the APR and the number of days\\n4. Return the daily interest rate\"\n    },\n    {\n        \"element\": \"Read Transaction Records from 'TXN.DAT' File\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"1. Open the 'TXN.DAT' file for reading\\n2. Read each transaction record from the file\\n3. Close the file after reading all transaction records\"\n    },\n    {\n        \"element\": \"Calculate Interest Amount for Each Transaction Record\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": \"1. For each transaction record, calculate the interest amount using the daily interest rate\\n2. Update the transaction record with the calculated interest amount\"\n    },\n    {\n        \"element\": \"Handle Cases Where Previous Payment Was Made in Full\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": \"1. Check if the previous payment for the transaction was made in full\\n2. If yes, set the interest amount for that transaction record to zero\"\n    },\n    {\n        \"element\": \"Stop Program When All Transaction Records Processed\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"1. Check if all transaction records have been processed\\n2. If yes, stop the program\"\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest For Transaction",
            "pseudocode": "1. Retrieve transaction details such as transaction date, balance, daily rate, and previous payment information.\n2. Calculate the number of days since the transaction date.\n3. Check if the previous payment was made in full.\n4. If previous payment was not made in full, calculate interest based on the balance, daily rate, and days since the transaction.\n5. Return the computed interest amount.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest For Transaction\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve transaction details such as transaction date, balance, daily rate, and previous payment information.\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the number of days since the transaction date.\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Check if the previous payment was made in full.\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"If previous payment was not made in full, calculate interest based on the balance, daily rate, and days since the transaction.\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Return the computed interest amount.\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate interest for a specific credit card transaction",
            "pseudocode": "Retrieve transaction details such as transaction date, balance, daily rate\nCalculate the number of days since the transaction date\nCheck if the previous payment was made in full\nIf previous payment was not made in full, calculate interest based on balance, daily rate, and days since the transaction\nReturn the calculated interest amount",
            "standard": "OpenAPI"
          },
          {
            "element": "Retrieve transaction details",
            "pseudocode": "Call the appropriate API endpoint to fetch transaction details\nExtract transaction date, balance, and daily rate from the response\nReturn the extracted transaction details",
            "standard": "BIAN"
          },
          {
            "element": "Calculate the number of days since the transaction date",
            "pseudocode": "Get the current date\nCalculate the difference in days between the current date and the transaction date\nReturn the number of days",
            "standard": "ISO"
          },
          {
            "element": "Check if the previous payment was made in full",
            "pseudocode": "Retrieve the details of the previous payment\nCompare the previous payment amount with the total transaction amount\nIf the previous payment amount is equal to or greater than the total transaction amount, return true (payment made in full)\nOtherwise, return false (payment not made in full)",
            "standard": "OpenAPI"
          },
          {
            "element": "Calculate interest based on balance, daily rate, and days since the transaction",
            "pseudocode": "Calculate the interest amount using the formula: balance * daily rate * days since transaction\nReturn the calculated interest amount",
            "standard": "BIAN"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate interest for a specific credit card transaction\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve transaction details such as transaction date, balance, daily rate\",\n            \"Calculate the number of days since the transaction date\",\n            \"Check if the previous payment was made in full\",\n            \"If previous payment was not made in full, calculate interest based on balance, daily rate, and days since the transaction\",\n            \"Return the calculated interest amount\"\n        ]\n    },\n    {\n        \"element\": \"Retrieve transaction details\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Call the appropriate API endpoint to fetch transaction details\",\n            \"Extract transaction date, balance, and daily rate from the response\",\n            \"Return the extracted transaction details\"\n        ]\n    },\n    {\n        \"element\": \"Calculate the number of days since the transaction date\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Get the current date\",\n            \"Calculate the difference in days between the current date and the transaction date\",\n            \"Return the number of days\"\n        ]\n    },\n    {\n        \"element\": \"Check if the previous payment was made in full\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve the details of the previous payment\",\n            \"Compare the previous payment amount with the total transaction amount\",\n            \"If the previous payment amount is equal to or greater than the total transaction amount, return true (payment made in full)\",\n            \"Otherwise, return false (payment not made in full)\"\n        ]\n    },\n    {\n        \"element\": \"Calculate interest based on balance, daily rate, and days since the transaction\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Calculate the interest amount using the formula: balance * daily rate * days since transaction\",\n            \"Return the calculated interest amount\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. Read the transaction records from the file until the end is reached\n    - Open the transaction file\n    - Read the first transaction record\n2. Calculate interest for each transaction\n    - While not end of file:\n    - Get the transaction date and balance\n    - Calculate the number of days since the transaction date\n    - Check if the previous payment was made in full\n    - If yes, set interest to zero\n    - If no, calculate interest based on balance, daily rate, and days since transaction date\n    - Display the card number and calculated interest amount\n    - Read the next transaction record",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Read the transaction records from the file until the end is reached\",\n                \"actions\": [\n                    \"Open the transaction file\",\n                    \"Read the first transaction record\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest for each transaction\",\n                \"actions\": [\n                    \"While not end of file:\",\n                    \"Get the transaction date and balance\",\n                    \"Calculate the number of days since the transaction date\",\n                    \"Check if the previous payment was made in full\",\n                    \"If yes, set interest to zero\",\n                    \"If no, calculate interest based on balance, daily rate, and days since transaction date\",\n                    \"Display the card number and calculated interest amount\",\n                    \"Read the next transaction record\"\n                ]\n            }\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "initializeProcess",
            "pseudocode": "1. Accept the current date in YYYYMMDD format as input\n2. Calculate the daily interest rate based on the annual percentage rate (APR)\n3. Set up necessary variables and parameters for the interest calculation process\n4. Perform any additional setup or validation steps required\n5. Return the initialized process state",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"initializeProcess\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Accept the current date in YYYYMMDD format as input\",\n                \"action\": \"Receive inputDate\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the daily interest rate based on the annual percentage rate (APR)\",\n                \"action\": \"Retrieve APR from system configuration\",\n                \"action\": \"Calculate dailyInterestRate = APR / 365\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Set up necessary variables and parameters for the interest calculation process\",\n                \"action\": \"Initialize variables: principalAmount, interestAccrued = 0, daysElapsed = 0\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Perform any additional setup or validation steps required\",\n                \"action\": \"Check for valid inputDate format and range\",\n                \"action\": \"Validate APR value\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Return the initialized process state\",\n                \"action\": \"Return initialized variables and parameters for interest calculation\"\n            }\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize current date",
            "pseudocode": "Set current date to today's date in ISO 8601 format.",
            "standard": "ISO"
          },
          {
            "element": "Initialize daily interest rate",
            "pseudocode": "Retrieve the daily interest rate for credit card transactions in ISO 4217 currency code format.",
            "standard": "ISO"
          },
          {
            "element": "Read transaction records from input file",
            "pseudocode": "Use Open API to define the endpoint or method to read transaction records from the input file.",
            "standard": "OpenAPI"
          },
          {
            "element": "Calculate number of days since each transaction",
            "pseudocode": "For each transaction, calculate the number of days between the transaction date and the current date in ISO 8601 format.",
            "standard": "ISO"
          },
          {
            "element": "Determine if full payment was made",
            "pseudocode": "Check if the payment amount for the transaction equals the total transaction amount to determine if a full payment was made.",
            "standard": "BIAN"
          },
          {
            "element": "Calculate interest based on balance, daily rate, and days since transaction",
            "pseudocode": "For each transaction, calculate the interest based on the remaining balance, daily interest rate, and the number of days since the transaction.",
            "standard": "ISO"
          },
          {
            "element": "Display card number and calculated interest",
            "pseudocode": "Use Open API to define the response format for displaying the card number and calculated interest.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize current date\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": \"Set current date to today's date in ISO 8601 format.\"\n    },\n    {\n        \"element\": \"Initialize daily interest rate\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": \"Retrieve the daily interest rate for credit card transactions in ISO 4217 currency code format.\"\n    },\n    {\n        \"element\": \"Read transaction records from input file\",\n        \"standard\": \"Open API Specification\",\n        \"pseudocode\": \"Use Open API to define the endpoint or method to read transaction records from the input file.\"\n    },\n    {\n        \"element\": \"Calculate number of days since each transaction\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": \"For each transaction, calculate the number of days between the transaction date and the current date in ISO 8601 format.\"\n    },\n    {\n        \"element\": \"Determine if full payment was made\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": \"Check if the payment amount for the transaction equals the total transaction amount to determine if a full payment was made.\"\n    },\n    {\n        \"element\": \"Calculate interest based on balance, daily rate, and days since transaction\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": \"For each transaction, calculate the interest based on the remaining balance, daily interest rate, and the number of days since the transaction.\"\n    },\n    {\n        \"element\": \"Display card number and calculated interest\",\n        \"standard\": \"Open API Specification\",\n        \"pseudocode\": \"Use Open API to define the response format for displaying the card number and calculated interest.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize Interest Calculation",
            "pseudocode": "1. Set the current date to today's date\n    - Retrieve the current date from the system\n    - Store the current date in a variable\n2. Compute the daily interest rate based on the APR\n    - Retrieve the annual percentage rate (APR) from the system\n    - Divide the APR by 365 to get the daily interest rate\n    - Store the daily interest rate in a variable",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize Interest Calculation\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Set the current date to today's date\",\n                \"actions\": [\n                    \"Retrieve the current date from the system\",\n                    \"Store the current date in a variable\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Compute the daily interest rate based on the APR\",\n                \"actions\": [\n                    \"Retrieve the annual percentage rate (APR) from the system\",\n                    \"Divide the APR by 365 to get the daily interest rate\",\n                    \"Store the daily interest rate in a variable\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest For Transaction",
            "pseudocode": "1. Retrieve balance, daily rate, and days since the transaction for the credit card transaction\n2. Calculate interest based on the provided inputs\n3. Return the calculated interest",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest For Transaction\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve balance, daily rate, and days since the transaction for the credit card transaction\",\n                \"action\": \"Retrieve balance, daily rate, and days since the transaction from the transaction data\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest based on the provided inputs\",\n                \"action\": \"Calculate interest using the formula: interest = balance * daily rate * days since the transaction\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Return the calculated interest\",\n                \"action\": \"Return the calculated interest for the credit card transaction\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest For Transaction",
            "pseudocode": "1. Retrieve the balance, daily rate, and days since the transaction for the credit card transaction. \n2. Calculate the interest amount by multiplying the balance by the daily rate and then by the days since the transaction. \n3. Return the calculated interest amount.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest For Transaction\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": \"1. Retrieve the balance, daily rate, and days since the transaction for the credit card transaction. \\n2. Calculate the interest amount by multiplying the balance by the daily rate and then by the days since the transaction. \\n3. Return the calculated interest amount.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize Interest Calculation",
            "pseudocode": "Set current date to today's date\nRetrieve annual percentage rate (APR)\nCompute daily interest rate by dividing APR by 365\nReturn current date and daily interest rate",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize Interest Calculation\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            \"Set current date to today's date\",\n            \"Retrieve annual percentage rate (APR)\",\n            \"Compute daily interest rate by dividing APR by 365\",\n            \"Return current date and daily interest rate\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Data Model",
            "pseudocode": "Define the structure of the customer account data model\nInclude fields for account number, current balance, transaction history, etc.",
            "standard": "BIAN"
          },
          {
            "element": "API Endpoint",
            "pseudocode": "Create an endpoint to receive requests to update account balances\nDefine the request parameters such as account number and transaction details\nImplement proper authentication and authorization mechanisms",
            "standard": "OpenAPI"
          },
          {
            "element": "Business Logic",
            "pseudocode": "Retrieve the customer account details based on the provided account number\nValidate the transaction details to ensure accuracy and consistency\nUpdate the account balance based on the transaction type (credit or debit)\nLog the transaction in the account's transaction history\nCalculate any applicable fees or interest based on the transaction",
            "standard": "ISO"
          },
          {
            "element": "Error Handling",
            "pseudocode": "Define error codes and messages for various scenarios such as invalid account number, insufficient funds, etc.\nHandle exceptions gracefully and return appropriate error responses",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Data Model\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Define the structure of the customer account data model\",\n            \"Include fields for account number, current balance, transaction history, etc.\"\n        ]\n    },\n    {\n        \"element\": \"API Endpoint\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Create an endpoint to receive requests to update account balances\",\n            \"Define the request parameters such as account number and transaction details\",\n            \"Implement proper authentication and authorization mechanisms\"\n        ]\n    },\n    {\n        \"element\": \"Business Logic\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Retrieve the customer account details based on the provided account number\",\n            \"Validate the transaction details to ensure accuracy and consistency\",\n            \"Update the account balance based on the transaction type (credit or debit)\",\n            \"Log the transaction in the account's transaction history\",\n            \"Calculate any applicable fees or interest based on the transaction\"\n        ]\n    },\n    {\n        \"element\": \"Error Handling\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Define error codes and messages for various scenarios such as invalid account number, insufficient funds, etc.\",\n            \"Handle exceptions gracefully and return appropriate error responses\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Identify Eligible Transactions for Interest Accrual",
            "pseudocode": "1. Retrieve all transactions for the customer\n2. Filter transactions for interest-bearing types\n3. Apply product-specific terms to filtered transactions\n4. Evaluate customer payment behaviors\n5. Determine eligible transactions for interest accrual",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Identify Eligible Transactions for Interest Accrual\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve all transactions for the customer\",\n                \"logic\": \"Call API endpoint to fetch all transactions associated with the customer\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Filter transactions for interest-bearing types\",\n                \"logic\": \"Iterate through the transactions and filter out those that are interest-bearing (e.g., purchases, cash advances)\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Apply product-specific terms to filtered transactions\",\n                \"logic\": \"Retrieve product-specific terms from the system and apply them to the filtered transactions\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Evaluate customer payment behaviors\",\n                \"logic\": \"Analyze the customer's payment behaviors such as on-time payments, payment amounts, etc.\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Determine eligible transactions for interest accrual\",\n                \"logic\": \"Based on the product-specific terms and customer payment behaviors, identify transactions eligible for daily interest accrual\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest",
            "pseudocode": "1. Get transaction details: balance, daily rate, days since transaction date\n2. Check if previous payment was made in full\n3. If previous payment was in full, set interest to zero\n4. If previous payment was not in full, calculate interest as balance * daily rate * days since transaction date\n5. Display card number and calculated interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": \"1. Get transaction details: balance, daily rate, days since transaction date\\n2. Check if previous payment was made in full\\n3. If previous payment was in full, set interest to zero\\n4. If previous payment was not in full, calculate interest as balance * daily rate * days since transaction date\\n5. Display card number and calculated interest amount\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest",
            "pseudocode": "1. Check if the previous payment was made in full\n2. Calculate interest amount\n3. Display card number and calculated interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if the previous payment was made in full\",\n                \"action\": \"Retrieve the payment status for the transaction\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest amount\",\n                \"action\": \"If previous payment was not made in full, calculate interest as balance * daily rate * days since transaction date\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Display card number and calculated interest amount\",\n                \"action\": \"Output the card number and the calculated interest amount\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Daily Interest Rate",
            "pseudocode": "1. Retrieve the Annual Percentage Rate (APR) provided as input. \n2. Validate that the APR is a non-negative decimal value. \n3. Divide the APR by 365 to get the daily interest rate. \n4. Return the calculated daily interest rate.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Daily Interest Rate\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": \"1. Retrieve the Annual Percentage Rate (APR) provided as input. \\n2. Validate that the APR is a non-negative decimal value. \\n3. Divide the APR by 365 to get the daily interest rate. \\n4. Return the calculated daily interest rate.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Daily Interest Rate",
            "pseudocode": "1. Input the Annual Percentage Rate (APR)\n    - Prompt user to enter the APR\n2. Calculate the daily interest rate\n    - Divide the APR by 365 to get the daily interest rate\n3. Output the daily interest rate\n    - Display the calculated daily interest rate to the user",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Daily Interest Rate\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Input the Annual Percentage Rate (APR)\",\n                \"actions\": [\n                    \"Prompt user to enter the APR\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the daily interest rate\",\n                \"actions\": [\n                    \"Divide the APR by 365 to get the daily interest rate\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Output the daily interest rate\",\n                \"actions\": [\n                    \"Display the calculated daily interest rate to the user\"\n                ]\n            }\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Daily Interest Rate",
            "pseudocode": "1. Retrieve the Annual Percentage Rate (APR) provided as input.\n2. Validate that the APR is a valid numerical value.\n3. Check if the APR is within the acceptable range (e.g., between 0 and 100%).\n4. Calculate the daily interest rate using the formula: APR / 365.\n5. Round the calculated daily interest rate to the required precision (e.g., 2 decimal places).\n6. Return the calculated daily interest rate as the output.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Daily Interest Rate\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve the Annual Percentage Rate (APR) provided as input.\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Validate that the APR is a valid numerical value.\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Check if the APR is within the acceptable range (e.g., between 0 and 100%).\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Calculate the daily interest rate using the formula: APR / 365.\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Round the calculated daily interest rate to the required precision (e.g., 2 decimal places).\"\n            },\n            {\n                \"step\": 6,\n                \"description\": \"Return the calculated daily interest rate as the output.\"\n            }\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Daily Interest Rate",
            "pseudocode": "1. Receive the Annual Percentage Rate (APR) as input.\n2. Validate that the APR is a valid numerical value.\n3. Divide the APR by 365 to get the daily interest rate.\n4. Return the calculated daily interest rate.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Daily Interest Rate\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": \"1. Receive the Annual Percentage Rate (APR) as input.\\n2. Validate that the APR is a valid numerical value.\\n3. Divide the APR by 365 to get the daily interest rate.\\n4. Return the calculated daily interest rate.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest For Transaction",
            "pseudocode": "1. Check if the previous payment was made in full\n2. Calculate interest amount based on balance, daily rate, and days since transaction\n3. Adjust interest amount based on previous payment status\n4. Return the calculated interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest For Transaction\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if the previous payment was made in full\",\n                \"logic\": \"if previousPaymentAmount == transactionAmount then previousPaymentInFull = true else previousPaymentInFull = false\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest amount based on balance, daily rate, and days since transaction\",\n                \"logic\": \"interestAmount = balance * dailyRate * daysSinceTransaction\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Adjust interest amount based on previous payment status\",\n                \"logic\": \"if previousPaymentInFull then interestAmount = 0\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Return the calculated interest amount\",\n                \"logic\": \"return interestAmount\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Transaction Interest",
            "pseudocode": "1. Get transaction details: balance, daily rate, transaction date, previous payment date. \n2. Calculate days since the transaction date. \n3. If previous payment was made in full, set interest to zero. \n4. If previous payment was not made in full, calculate interest based on balance, daily rate, and days since transaction date. \n5. Display card number and calculated interest amount.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Transaction Interest\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": \"1. Get transaction details: balance, daily rate, transaction date, previous payment date. \\n2. Calculate days since the transaction date. \\n3. If previous payment was made in full, set interest to zero. \\n4. If previous payment was not made in full, calculate interest based on balance, daily rate, and days since transaction date. \\n5. Display card number and calculated interest amount.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Transaction Interest",
            "pseudocode": "1. Retrieve transaction details including balance, daily rate, transaction date, and previous payment status\n2. Calculate the number of days since the transaction date\n3. Check if the previous payment was made in full\n4. If previous payment was made in full, set interest amount to zero\n5. If previous payment was not made in full, calculate interest based on balance, daily rate, and days since transaction date\n6. Display the card number and the calculated interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Transaction Interest\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve transaction details including balance, daily rate, transaction date, and previous payment status\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the number of days since the transaction date\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Check if the previous payment was made in full\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"If previous payment was made in full, set interest amount to zero\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"If previous payment was not made in full, calculate interest based on balance, daily rate, and days since transaction date\"\n            },\n            {\n                \"step\": 6,\n                \"description\": \"Display the card number and the calculated interest amount\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. For each transaction in the list of transactions:\n    - Get the balance, daily rate, transaction date, and previous payment information\n2. Calculate interest for each transaction based on business rules:\n    - If previous payment was made in full:\n    -    - Set interest to zero\n    - Else:\n    -    - Calculate interest as balance * daily rate * days since transaction date\n3. Display the card number and calculated interest for each transaction\n    - Output card number and calculated interest",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"For each transaction in the list of transactions:\",\n                \"actions\": [\n                    \"Get the balance, daily rate, transaction date, and previous payment information\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest for each transaction based on business rules:\",\n                \"actions\": [\n                    \"If previous payment was made in full:\",\n                    \"   - Set interest to zero\",\n                    \"Else:\",\n                    \"   - Calculate interest as balance * daily rate * days since transaction date\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Display the card number and calculated interest for each transaction\",\n                \"actions\": [\n                    \"Output card number and calculated interest\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. For each transaction in the list of transactions:\n    - Get the balance, daily rate, transaction date, and previous payment date for the transaction.\n2. Calculate the days since the transaction date:\n    - Get the current date.\n    - Calculate the difference in days between the current date and the transaction date.\n3. Check if the previous payment was made in full:\n    - If the previous payment date is before the transaction date and the previous payment amount equals the balance, set interest to zero.\n4. Calculate interest if previous payment was not made in full:\n    - Calculate interest as the product of balance, daily rate, and days since the transaction date.\n5. Display the card number and calculated interest for each transaction:\n    - Output the card number and calculated interest for the transaction.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"For each transaction in the list of transactions:\",\n                \"actions\": [\n                    \"Get the balance, daily rate, transaction date, and previous payment date for the transaction.\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the days since the transaction date:\",\n                \"actions\": [\n                    \"Get the current date.\",\n                    \"Calculate the difference in days between the current date and the transaction date.\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Check if the previous payment was made in full:\",\n                \"actions\": [\n                    \"If the previous payment date is before the transaction date and the previous payment amount equals the balance, set interest to zero.\"\n                ]\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Calculate interest if previous payment was not made in full:\",\n                \"actions\": [\n                    \"Calculate interest as the product of balance, daily rate, and days since the transaction date.\"\n                ]\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Display the card number and calculated interest for each transaction:\",\n                \"actions\": [\n                    \"Output the card number and calculated interest for the transaction.\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. For each transaction in the list of transactions:\n    - Get the balance, daily interest rate, days since transaction date, and previous payment status\n2. Calculate interest for each transaction based on business rules:\n    - If previous payment was made in full:\n    - Set interest to zero\n    - Else:\n    - Calculate interest as balance * daily interest rate * days since transaction date\n3. Display the card number and calculated interest for each transaction",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"For each transaction in the list of transactions:\",\n                \"actions\": [\n                    \"Get the balance, daily interest rate, days since transaction date, and previous payment status\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest for each transaction based on business rules:\",\n                \"actions\": [\n                    \"If previous payment was made in full:\",\n                    \"Set interest to zero\",\n                    \"Else:\",\n                    \"Calculate interest as balance * daily interest rate * days since transaction date\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Display the card number and calculated interest for each transaction\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Monthly Interest",
            "pseudocode": "1. Check if the account is eligible for interest application\n2. Retrieve the monthly interest rate for the account\n3. Retrieve the account balance\n4. Calculate the monthly interest amount\n5. Apply the calculated interest amount to the account\n6. Update the account with the new balance",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Monthly Interest\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if the account is eligible for interest application\",\n                \"logic\": \"if account type is eligible for interest calculation\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Retrieve the monthly interest rate for the account\",\n                \"logic\": \"retrieve monthly interest rate from the account details\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Retrieve the account balance\",\n                \"logic\": \"retrieve current account balance\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Calculate the monthly interest amount\",\n                \"logic\": \"monthly interest amount = (monthly interest rate * account balance)\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Apply the calculated interest amount to the account\",\n                \"logic\": \"add the calculated interest amount to the account balance\"\n            },\n            {\n                \"step\": 6,\n                \"description\": \"Update the account with the new balance\",\n                \"logic\": \"update the account balance in the system\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Monthly Interest Business Logic",
            "pseudocode": "1. Check if the account is eligible for interest application\n    - Retrieve account details\n    - Check if the account type is eligible for interest calculation\n2. Calculate the monthly interest amount\n    - Retrieve the monthly interest rate for the account\n    - Retrieve the current balance of the account\n    - Apply the interest rate to the account balance to calculate the interest amount\n3. Apply the calculated interest amount to the account\n    - Add the calculated interest amount to the account balance\n    - Update the account balance in the system",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Monthly Interest Business Logic\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if the account is eligible for interest application\",\n                \"actions\": [\n                    \"Retrieve account details\",\n                    \"Check if the account type is eligible for interest calculation\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the monthly interest amount\",\n                \"actions\": [\n                    \"Retrieve the monthly interest rate for the account\",\n                    \"Retrieve the current balance of the account\",\n                    \"Apply the interest rate to the account balance to calculate the interest amount\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Apply the calculated interest amount to the account\",\n                \"actions\": [\n                    \"Add the calculated interest amount to the account balance\",\n                    \"Update the account balance in the system\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. Read transaction records until the end of the file is reached\n    - Open the transaction file\n    - Read the first transaction record\n2. Calculate interest for each transaction\n    - While there are more transaction records:\n    -    - Calculate days since the transaction date\n    -    - Check if the previous payment was made in full\n    -    - If previous payment was made in full, set interest to zero\n    -    - If previous payment was not made in full:\n    -        - Calculate interest based on balance, daily rate, and days since the transaction\n    -        - Display card number and calculated interest for the transaction\n3. Display calculated interest for each transaction\n    - Repeat the above steps for each transaction record until the end of the file is reached",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Read transaction records until the end of the file is reached\",\n                \"actions\": [\n                    \"Open the transaction file\",\n                    \"Read the first transaction record\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest for each transaction\",\n                \"actions\": [\n                    \"While there are more transaction records:\",\n                    \"   - Calculate days since the transaction date\",\n                    \"   - Check if the previous payment was made in full\",\n                    \"   - If previous payment was made in full, set interest to zero\",\n                    \"   - If previous payment was not made in full:\",\n                    \"       - Calculate interest based on balance, daily rate, and days since the transaction\",\n                    \"       - Display card number and calculated interest for the transaction\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Display calculated interest for each transaction\",\n                \"actions\": [\n                    \"Repeat the above steps for each transaction record until the end of the file is reached\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize Interest Calculation Process",
            "pseudocode": "Step 1: Retrieve the Annual Percentage Rate (APR) from the system configuration.\nStep 2: Set the current date to the system's current date.\nStep 3: Calculate the daily interest rate based on the APR.\nStep 4: Store the current date and daily interest rate in the system for future calculations.\nStep 5: Log the initialization process for auditing purposes.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize Interest Calculation Process\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Step 1: Retrieve the Annual Percentage Rate (APR) from the system configuration.\",\n            \"Step 2: Set the current date to the system's current date.\",\n            \"Step 3: Calculate the daily interest rate based on the APR.\",\n            \"Step 4: Store the current date and daily interest rate in the system for future calculations.\",\n            \"Step 5: Log the initialization process for auditing purposes.\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Daily Interest Rate",
            "pseudocode": "Input: Annual Percentage Rate (APR)\nStep 1: Validate that APR is a non-negative number\nStep 2: Calculate daily interest rate as APR divided by 365\nStep 3: Return the calculated daily interest rate",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Daily Interest Rate\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            \"Input: Annual Percentage Rate (APR)\",\n            \"Step 1: Validate that APR is a non-negative number\",\n            \"Step 2: Calculate daily interest rate as APR divided by 365\",\n            \"Step 3: Return the calculated daily interest rate\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest Amount",
            "pseudocode": "1. Retrieve transaction balance, daily interest rate, and days since transaction date\n2. Calculate interest amount = transaction balance * daily interest rate * days since transaction date\n3. Return the calculated interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest Amount\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve transaction balance, daily interest rate, and days since transaction date\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest amount = transaction balance * daily interest rate * days since transaction date\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Return the calculated interest amount\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Interest Calculation Logic",
            "pseudocode": "Retrieve account details including account group\nCheck if account is eligible for interest calculation based on account group\nIf account is eligible:\n- Retrieve interest rate applicable for the account group\n- Calculate interest amount based on account balance and interest rate\n- Record the interest transaction in the account's transaction history\nElse:\n- Skip interest calculation\nEnd if",
            "standard": "ISO"
          },
          {
            "element": "Interest Application Business Rule",
            "pseudocode": "Identify the account group of the account\nCheck if the account group is eligible for interest application\nIf eligible:\n- Apply interest calculation logic\nElse:\n- Do not apply interest\nEnd if",
            "standard": "BIAN"
          },
          {
            "element": "Interest Application API Endpoint",
            "pseudocode": "Receive request to apply interest rules for an account\nValidate the request parameters\nCall the interest calculation logic function\nReturn success response with details of interest applied\nHandle any errors or exceptions",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Interest Calculation Logic\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            \"Retrieve account details including account group\",\n            \"Check if account is eligible for interest calculation based on account group\",\n            \"If account is eligible:\",\n            \"   - Retrieve interest rate applicable for the account group\",\n            \"   - Calculate interest amount based on account balance and interest rate\",\n            \"   - Record the interest transaction in the account's transaction history\",\n            \"Else:\",\n            \"   - Skip interest calculation\",\n            \"End if\"\n        ]\n    },\n    {\n        \"element\": \"Interest Application Business Rule\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Identify the account group of the account\",\n            \"Check if the account group is eligible for interest application\",\n            \"If eligible:\",\n            \"   - Apply interest calculation logic\",\n            \"Else:\",\n            \"   - Do not apply interest\",\n            \"End if\"\n        ]\n    },\n    {\n        \"element\": \"Interest Application API Endpoint\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Receive request to apply interest rules for an account\",\n            \"Validate the request parameters\",\n            \"Call the interest calculation logic function\",\n            \"Return success response with details of interest applied\",\n            \"Handle any errors or exceptions\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Retrieve Transaction Category Balance File",
            "pseudocode": "Open connection to the Transaction Category Balance File\nRead each record in the file",
            "standard": "OpenAPI"
          },
          {
            "element": "Update Account Balances",
            "pseudocode": "For each transaction record:\n- Identify the account associated with the transaction\n- Update the account balance based on the transaction amount and type (credit/debit)",
            "standard": "BIAN"
          },
          {
            "element": "Retrieve Account and Cross-Reference Data",
            "pseudocode": "For each account involved in the transaction:\n- Retrieve account details such as owner information, account type, etc.\n- Retrieve cross-reference data if needed for further processing",
            "standard": "ISO"
          },
          {
            "element": "Compute Interest Rates",
            "pseudocode": "For each account with a balance:\n- Determine the applicable interest rate based on account type and balance\n- Calculate and apply interest to the account balance",
            "standard": "BIAN"
          },
          {
            "element": "Compute Fees",
            "pseudocode": "For each transaction record:\n- Check if any fees are applicable based on transaction type or account conditions\n- Calculate and apply fees to the account balance",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Retrieve Transaction Category Balance File\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Open connection to the Transaction Category Balance File\",\n            \"Read each record in the file\"\n        ]\n    },\n    {\n        \"element\": \"Update Account Balances\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each transaction record:\",\n            \"   - Identify the account associated with the transaction\",\n            \"   - Update the account balance based on the transaction amount and type (credit/debit)\"\n        ]\n    },\n    {\n        \"element\": \"Retrieve Account and Cross-Reference Data\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"For each account involved in the transaction:\",\n            \"   - Retrieve account details such as owner information, account type, etc.\",\n            \"   - Retrieve cross-reference data if needed for further processing\"\n        ]\n    },\n    {\n        \"element\": \"Compute Interest Rates\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each account with a balance:\",\n            \"   - Determine the applicable interest rate based on account type and balance\",\n            \"   - Calculate and apply interest to the account balance\"\n        ]\n    },\n    {\n        \"element\": \"Compute Fees\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each transaction record:\",\n            \"   - Check if any fees are applicable based on transaction type or account conditions\",\n            \"   - Calculate and apply fees to the account balance\"\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Update Account Balances",
            "pseudocode": "For each customer account:\n- Retrieve current balance\n- Update balance based on recent transactions\n- Save updated balance",
            "standard": "ISO"
          },
          {
            "element": "Review Customer Information",
            "pseudocode": "For each customer account:\n- Retrieve customer information\n- Validate customer details\n- Check for any discrepancies",
            "standard": "BIAN"
          },
          {
            "element": "Review Product Group Information",
            "pseudocode": "For each customer account:\n- Identify product group associated with the account\n- Retrieve product group information\n- Validate product group details",
            "standard": "OpenAPI"
          },
          {
            "element": "Identify Applicable Interest Rates",
            "pseudocode": "For each customer account:\n- Determine the type of account (e.g., savings, checking)\n- Fetch applicable interest rates based on account type",
            "standard": "ISO"
          },
          {
            "element": "Calculate Monthly Interest",
            "pseudocode": "For each customer account:\n- Calculate monthly interest based on balance and interest rate\n- Update monthly interest amount",
            "standard": "ISO"
          },
          {
            "element": "Calculate Cumulative Interest",
            "pseudocode": "For each customer account:\n- Calculate cumulative interest by summing monthly interest amounts\n- Update cumulative interest total",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Update Account Balances\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"   - Retrieve current balance\",\n            \"   - Update balance based on recent transactions\",\n            \"   - Save updated balance\"\n        ]\n    },\n    {\n        \"element\": \"Review Customer Information\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"   - Retrieve customer information\",\n            \"   - Validate customer details\",\n            \"   - Check for any discrepancies\"\n        ]\n    },\n    {\n        \"element\": \"Review Product Group Information\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"   - Identify product group associated with the account\",\n            \"   - Retrieve product group information\",\n            \"   - Validate product group details\"\n        ]\n    },\n    {\n        \"element\": \"Identify Applicable Interest Rates\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"   - Determine the type of account (e.g., savings, checking)\",\n            \"   - Fetch applicable interest rates based on account type\"\n        ]\n    },\n    {\n        \"element\": \"Calculate Monthly Interest\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"   - Calculate monthly interest based on balance and interest rate\",\n            \"   - Update monthly interest amount\"\n        ]\n    },\n    {\n        \"element\": \"Calculate Cumulative Interest\",\n        \"standard\": \"ISO 20022\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"   - Calculate cumulative interest by summing monthly interest amounts\",\n            \"   - Update cumulative interest total\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize current date and daily interest rate",
            "pseudocode": "Set current date to today's date in ISO 8601 format. Set daily interest rate based on the annual percentage rate (APR) provided.",
            "standard": "ISO"
          },
          {
            "element": "Calculate interest for each transaction",
            "pseudocode": "For each credit card transaction: Calculate the balance, daily rate, and days since the transaction. Use these values to compute the interest accrued for that transaction.",
            "standard": "BIAN"
          },
          {
            "element": "Display card number and calculated interest",
            "pseudocode": "Display the card number associated with the transaction and the calculated interest amount for that transaction.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize current date and daily interest rate\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": \"Set current date to today's date in ISO 8601 format. Set daily interest rate based on the annual percentage rate (APR) provided.\"\n    },\n    {\n        \"element\": \"Calculate interest for each transaction\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": \"For each credit card transaction: Calculate the balance, daily rate, and days since the transaction. Use these values to compute the interest accrued for that transaction.\"\n    },\n    {\n        \"element\": \"Display card number and calculated interest\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"Display the card number associated with the transaction and the calculated interest amount for that transaction.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Monthly Interest",
            "pseudocode": "1. Check if interest applies to the account based on account type and interest rate\n    - Retrieve account type and interest rate from the account information\n    - Check if the interest rate is greater than 0 to determine if interest applies\n2. Calculate the monthly interest amount\n    - Retrieve the account balance from the account information\n    - Calculate the interest amount based on the account balance and interest rate\n    - Apply any specific rules or conditions for interest calculation based on the account group\n3. Update the account with the calculated interest amount\n    - Add the calculated interest amount to the account balance\n    - Update the account information with the new balance including the interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Monthly Interest\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if interest applies to the account based on account type and interest rate\",\n                \"actions\": [\n                    \"Retrieve account type and interest rate from the account information\",\n                    \"Check if the interest rate is greater than 0 to determine if interest applies\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the monthly interest amount\",\n                \"actions\": [\n                    \"Retrieve the account balance from the account information\",\n                    \"Calculate the interest amount based on the account balance and interest rate\",\n                    \"Apply any specific rules or conditions for interest calculation based on the account group\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Update the account with the calculated interest amount\",\n                \"actions\": [\n                    \"Add the calculated interest amount to the account balance\",\n                    \"Update the account information with the new balance including the interest amount\"\n                ]\n            }\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize current date and daily interest rate",
            "pseudocode": "Set current_date to today's date in ISO 8601 format. Set daily_interest_rate based on the annual percentage rate (APR) provided.",
            "standard": "ISO"
          },
          {
            "element": "Read transaction records",
            "pseudocode": "Retrieve transaction records from the credit card system using the appropriate API endpoint.",
            "standard": "OpenAPI"
          },
          {
            "element": "Calculate days since each transaction",
            "pseudocode": "For each transaction record, calculate the number of days since the transaction date using ISO 8601 date format and the current date.",
            "standard": "ISO"
          },
          {
            "element": "Determine payment status",
            "pseudocode": "Check the payment status of each transaction to determine if it has been paid or is outstanding based on the credit card system's payment status codes.",
            "standard": "BIAN"
          },
          {
            "element": "Compute interest amount",
            "pseudocode": "For each outstanding transaction, calculate the interest amount using the daily interest rate, number of days since the transaction, and transaction amount in the currency specified by ISO 4217.",
            "standard": "ISO"
          },
          {
            "element": "Display card number with calculated interest",
            "pseudocode": "Display the card number along with the calculated interest amount for each outstanding transaction in a user-friendly format using the appropriate API response structure.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize current date and daily interest rate\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": \"Set current_date to today's date in ISO 8601 format. Set daily_interest_rate based on the annual percentage rate (APR) provided.\"\n    },\n    {\n        \"element\": \"Read transaction records\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"Retrieve transaction records from the credit card system using the appropriate API endpoint.\"\n    },\n    {\n        \"element\": \"Calculate days since each transaction\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": \"For each transaction record, calculate the number of days since the transaction date using ISO 8601 date format and the current date.\"\n    },\n    {\n        \"element\": \"Determine payment status\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": \"Check the payment status of each transaction to determine if it has been paid or is outstanding based on the credit card system's payment status codes.\"\n    },\n    {\n        \"element\": \"Compute interest amount\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": \"For each outstanding transaction, calculate the interest amount using the daily interest rate, number of days since the transaction, and transaction amount in the currency specified by ISO 4217.\"\n    },\n    {\n        \"element\": \"Display card number with calculated interest\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"Display the card number along with the calculated interest amount for each outstanding transaction in a user-friendly format using the appropriate API response structure.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize current date and daily interest rate",
            "pseudocode": "Set current date to today's date. Retrieve daily interest rate from system configuration.",
            "standard": "ISO"
          },
          {
            "element": "Read transaction records",
            "pseudocode": "Fetch transaction records from the credit card system API based on specified criteria such as card number and date range.",
            "standard": "OpenAPI"
          },
          {
            "element": "Calculate days since each transaction",
            "pseudocode": "For each transaction record, subtract the transaction date from the current date to determine the number of days since the transaction occurred.",
            "standard": "ISO"
          },
          {
            "element": "Determine payment status",
            "pseudocode": "Check the payment status of each transaction by comparing the payment date with the current date. If payment is made, mark the transaction as paid; otherwise, mark it as unpaid.",
            "standard": "BIAN"
          },
          {
            "element": "Compute interest amount",
            "pseudocode": "For each unpaid transaction, calculate the interest amount using the daily interest rate and the number of days since the transaction. Sum up the interest amounts for all unpaid transactions.",
            "standard": "ISO"
          },
          {
            "element": "Display card number with calculated interest",
            "pseudocode": "Output the card number along with the total calculated interest amount for all unpaid transactions.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize current date and daily interest rate\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": \"Set current date to today's date. Retrieve daily interest rate from system configuration.\"\n    },\n    {\n        \"element\": \"Read transaction records\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"Fetch transaction records from the credit card system API based on specified criteria such as card number and date range.\"\n    },\n    {\n        \"element\": \"Calculate days since each transaction\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": \"For each transaction record, subtract the transaction date from the current date to determine the number of days since the transaction occurred.\"\n    },\n    {\n        \"element\": \"Determine payment status\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": \"Check the payment status of each transaction by comparing the payment date with the current date. If payment is made, mark the transaction as paid; otherwise, mark it as unpaid.\"\n    },\n    {\n        \"element\": \"Compute interest amount\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": \"For each unpaid transaction, calculate the interest amount using the daily interest rate and the number of days since the transaction. Sum up the interest amounts for all unpaid transactions.\"\n    },\n    {\n        \"element\": \"Display card number with calculated interest\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"Output the card number along with the total calculated interest amount for all unpaid transactions.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "initializeDailyInterestRate",
            "pseudocode": "1. Accept the current date in YYYYMMDD format as input.\n2. Retrieve the annual percentage rate (APR) from the system.\n3. Calculate the daily interest rate by dividing the APR by 365.\n4. Return the calculated daily interest rate.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"initializeDailyInterestRate\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": \"1. Accept the current date in YYYYMMDD format as input.\\n2. Retrieve the annual percentage rate (APR) from the system.\\n3. Calculate the daily interest rate by dividing the APR by 365.\\n4. Return the calculated daily interest rate.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Initialize Interest Calculation",
            "pseudocode": "Step 1: Retrieve the Annual Percentage Rate (APR) provided by the user.\nStep 2: Calculate the daily interest rate by dividing the APR by 365 (number of days in a year).\nStep 3: Set the current date to the system's current date.\nStep 4: Prepare the system for interest calculation for each transaction.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Initialize Interest Calculation\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Step 1: Retrieve the Annual Percentage Rate (APR) provided by the user.\",\n            \"Step 2: Calculate the daily interest rate by dividing the APR by 365 (number of days in a year).\",\n            \"Step 3: Set the current date to the system's current date.\",\n            \"Step 4: Prepare the system for interest calculation for each transaction.\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate number of days since transaction date",
            "pseudocode": "Get current date\nCalculate difference between current date and transaction date",
            "standard": "ISO"
          },
          {
            "element": "Determine interest amount based on balance, daily rate, and days since transaction",
            "pseudocode": "If previous payment indicator is 'Y', set interest amount to zero\nElse calculate interest amount using formula: balance * daily rate * days since transaction",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate number of days since transaction date\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": [\n            \"Get current date\",\n            \"Calculate difference between current date and transaction date\"\n        ]\n    },\n    {\n        \"element\": \"Determine interest amount based on balance, daily rate, and days since transaction\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": [\n            \"If previous payment indicator is 'Y', set interest amount to zero\",\n            \"Else calculate interest amount using formula: balance * daily rate * days since transaction\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate number of days since transaction date",
            "pseudocode": "Get current date\nCalculate difference between current date and transaction date",
            "standard": "ISO"
          },
          {
            "element": "Determine interest amount based on balance, daily rate, and days since transaction",
            "pseudocode": "If previous payment indicator is 'Y', set interest amount to zero\nElse calculate interest amount using formula: balance * daily rate * days since transaction",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate number of days since transaction date\",\n        \"standard\": \"ISO 8601\",\n        \"pseudocode\": [\n            \"Get current date\",\n            \"Calculate difference between current date and transaction date\"\n        ]\n    },\n    {\n        \"element\": \"Determine interest amount based on balance, daily rate, and days since transaction\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": [\n            \"If previous payment indicator is 'Y', set interest amount to zero\",\n            \"Else calculate interest amount using formula: balance * daily rate * days since transaction\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "calculateDailyInterestRate",
            "pseudocode": "1. Retrieve the Annual Percentage Rate (APR) from the configuration\n2. Calculate the daily interest rate\n3. Return the calculated daily interest rate",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"calculateDailyInterestRate\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve the Annual Percentage Rate (APR) from the configuration\",\n                \"action\": \"Fetch the APR value from the system configuration\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the daily interest rate\",\n                \"action\": \"Divide the APR by the number of days in a year to get the daily rate\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Return the calculated daily interest rate\",\n                \"action\": \"Provide the computed daily interest rate as the output\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "calculateDailyInterestRate",
            "pseudocode": "Retrieve the configured Annual Percentage Rate (APR) from the system\nCheck if the APR is valid and within the acceptable range\nIf APR is not valid, throw an error or return a default value\nCalculate the daily interest rate by dividing the APR by the number of days in a year\nReturn the calculated daily interest rate",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"calculateDailyInterestRate\",\n        \"standard\": \"ISO 4217\",\n        \"pseudocode\": [\n            \"Retrieve the configured Annual Percentage Rate (APR) from the system\",\n            \"Check if the APR is valid and within the acceptable range\",\n            \"If APR is not valid, throw an error or return a default value\",\n            \"Calculate the daily interest rate by dividing the APR by the number of days in a year\",\n            \"Return the calculated daily interest rate\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Retrieve recent financial activity for all customer accounts",
            "pseudocode": "For each customer account:\n1. Retrieve recent transactions\n2. Update account balances to reflect recent transactions",
            "standard": "OpenAPI"
          },
          {
            "element": "Review customer and product group information",
            "pseudocode": "For each customer:\n1. Retrieve customer information\n2. Retrieve associated product group information\n3. Review the information",
            "standard": "BIAN"
          },
          {
            "element": "Identify applicable interest rates",
            "pseudocode": "For each product group:\n1. Identify the applicable interest rate based on product type and customer profile",
            "standard": "ISO"
          },
          {
            "element": "Calculate monthly and cumulative interest if applicable",
            "pseudocode": "For each customer account with applicable interest rates:\n1. Calculate monthly interest based on the account balance and interest rate\n2. Update cumulative interest for the account",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Retrieve recent financial activity for all customer accounts\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"1. Retrieve recent transactions\",\n            \"2. Update account balances to reflect recent transactions\"\n        ]\n    },\n    {\n        \"element\": \"Review customer and product group information\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each customer:\",\n            \"1. Retrieve customer information\",\n            \"2. Retrieve associated product group information\",\n            \"3. Review the information\"\n        ]\n    },\n    {\n        \"element\": \"Identify applicable interest rates\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"For each product group:\",\n            \"1. Identify the applicable interest rate based on product type and customer profile\"\n        ]\n    },\n    {\n        \"element\": \"Calculate monthly and cumulative interest if applicable\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each customer account with applicable interest rates:\",\n            \"1. Calculate monthly interest based on the account balance and interest rate\",\n            \"2. Update cumulative interest for the account\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Retrieve recent financial activity for all customer accounts",
            "pseudocode": "For each customer account:\n1. Query recent transactions from the database\n2. Update account balances based on the transactions",
            "standard": "OpenAPI"
          },
          {
            "element": "Review customer and product group information",
            "pseudocode": "For each customer:\n1. Retrieve customer information from the customer database\n2. Retrieve associated product groups information\n3. Perform necessary validations and checks",
            "standard": "BIAN"
          },
          {
            "element": "Identify applicable interest rates",
            "pseudocode": "For each product group:\n1. Determine the type of product to apply interest rates\n2. Retrieve the applicable interest rates from the interest rate database",
            "standard": "ISO"
          },
          {
            "element": "Calculate monthly and cumulative interest if applicable",
            "pseudocode": "For each account with applicable interest rates:\n1. Calculate monthly interest based on the account balance and interest rate\n2. Update the account with the calculated monthly interest\n3. Accumulate the monthly interest to calculate cumulative interest",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Retrieve recent financial activity for all customer accounts\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each customer account:\",\n            \"1. Query recent transactions from the database\",\n            \"2. Update account balances based on the transactions\"\n        ]\n    },\n    {\n        \"element\": \"Review customer and product group information\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each customer:\",\n            \"1. Retrieve customer information from the customer database\",\n            \"2. Retrieve associated product groups information\",\n            \"3. Perform necessary validations and checks\"\n        ]\n    },\n    {\n        \"element\": \"Identify applicable interest rates\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"For each product group:\",\n            \"1. Determine the type of product to apply interest rates\",\n            \"2. Retrieve the applicable interest rates from the interest rate database\"\n        ]\n    },\n    {\n        \"element\": \"Calculate monthly and cumulative interest if applicable\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each account with applicable interest rates:\",\n            \"1. Calculate monthly interest based on the account balance and interest rate\",\n            \"2. Update the account with the calculated monthly interest\",\n            \"3. Accumulate the monthly interest to calculate cumulative interest\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest Business Logic",
            "pseudocode": "Retrieve transaction details: balance, daily rate, days since transaction\nCheck if grace period compliance is required based on business rules\nIf grace period compliance required:\n- Determine if transaction falls within grace period\n- If yes, no interest accrual needed\n- If no, proceed to calculate interest\nCalculate interest amount based on balance, daily rate, and days since transaction\nReturn calculated interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest Business Logic\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            \"Retrieve transaction details: balance, daily rate, days since transaction\",\n            \"Check if grace period compliance is required based on business rules\",\n            \"If grace period compliance required:\",\n            \"   - Determine if transaction falls within grace period\",\n            \"   - If yes, no interest accrual needed\",\n            \"   - If no, proceed to calculate interest\",\n            \"Calculate interest amount based on balance, daily rate, and days since transaction\",\n            \"Return calculated interest amount\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest Business Logic",
            "pseudocode": "1. Check if the previous payment was made in full\n    - Retrieve information about the previous payment\n    - Check if the previous payment amount equals the transaction amount\n2. Calculate interest based on balance, daily rate, and days since transaction\n    - Retrieve current balance, daily rate, and days since the transaction\n    - Calculate daily interest amount using the formula: daily rate * balance * days\n    - If previous payment was made in full, apply interest only to the remaining balance after the payment\n3. Determine the total interest amount\n    - Sum up the daily interest amounts calculated for each day since the transaction",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest Business Logic\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if the previous payment was made in full\",\n                \"actions\": [\n                    \"Retrieve information about the previous payment\",\n                    \"Check if the previous payment amount equals the transaction amount\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest based on balance, daily rate, and days since transaction\",\n                \"actions\": [\n                    \"Retrieve current balance, daily rate, and days since the transaction\",\n                    \"Calculate daily interest amount using the formula: daily rate * balance * days\",\n                    \"If previous payment was made in full, apply interest only to the remaining balance after the payment\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Determine the total interest amount\",\n                \"actions\": [\n                    \"Sum up the daily interest amounts calculated for each day since the transaction\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Retrieve Customer Accounts",
            "pseudocode": "Retrieve list of all customer accounts from the database\nFilter out closed accounts or accounts with inactive status\nReturn the list of active customer accounts",
            "standard": "OpenAPI"
          },
          {
            "element": "Review Financial Activity",
            "pseudocode": "For each active customer account:\n- Fetch recent financial transactions\n- Calculate the total financial activity based on the transactions\n- Update the account balance to reflect the recent activity",
            "standard": "BIAN"
          },
          {
            "element": "Update Account Balances",
            "pseudocode": "For each active customer account:\n- Calculate the net change in balance from recent financial activity\n- Update the account balance in the database with the new balance",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Retrieve Customer Accounts\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve list of all customer accounts from the database\",\n            \"Filter out closed accounts or accounts with inactive status\",\n            \"Return the list of active customer accounts\"\n        ]\n    },\n    {\n        \"element\": \"Review Financial Activity\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each active customer account:\",\n            \" - Fetch recent financial transactions\",\n            \" - Calculate the total financial activity based on the transactions\",\n            \" - Update the account balance to reflect the recent activity\"\n        ]\n    },\n    {\n        \"element\": \"Update Account Balances\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"For each active customer account:\",\n            \" - Calculate the net change in balance from recent financial activity\",\n            \" - Update the account balance in the database with the new balance\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest",
            "pseudocode": "1. Check if the previous payment was made in full\n2. Calculate the interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if the previous payment was made in full\",\n                \"logic\": \"if previous payment was made in full, set interest to zero\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate the interest amount\",\n                \"logic\": \"interest = balance * daily interest rate * days since transaction\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest for Transactions",
            "pseudocode": "1. For each transaction in the transaction file:",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest for Transactions\",\n        \"standard\": \"ISO 10962:2015\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"For each transaction in the transaction file:\",\n                \"sub_steps\": [\n                    {\n                        \"sub_step\": 1,\n                        \"description\": \"Calculate the number of days since the transaction date based on the current date.\"\n                    },\n                    {\n                        \"sub_step\": 2,\n                        \"description\": \"Check if the previous payment was made in full:\"\n                    },\n                    {\n                        \"sub_step\": 3,\n                        \"description\": \"If previous payment was made in full, set interest amount to zero.\"\n                    },\n                    {\n                        \"sub_step\": 4,\n                        \"description\": \"If previous payment was not made in full, calculate interest amount using the formula:\",\n                        \"formula\": \"Interest Amount = Balance * Daily Interest Rate * Days Since Transaction\"\n                    },\n                    {\n                        \"sub_step\": 5,\n                        \"description\": \"Display the card number and the calculated interest amount for each transaction.\"\n                    }\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "initializeInterestCalculation",
            "pseudocode": "Set up the current date by fetching the system date\nRetrieve the Annual Percentage Rate (APR) for interest calculation\nCalculate the daily interest rate by dividing APR by 365\nStore the calculated daily interest rate for future calculations",
            "standard": "OpenAPI"
          },
          {
            "element": "calculateInterest",
            "pseudocode": "For each eligible account:\n- Retrieve the account balance and interest rate\n- Calculate the monthly interest by multiplying the balance with the monthly interest rate\n- Add the monthly interest to the account balance\n- Calculate the cumulative interest by summing up all monthly interests",
            "standard": "BIAN"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"initializeInterestCalculation\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Set up the current date by fetching the system date\",\n            \"Retrieve the Annual Percentage Rate (APR) for interest calculation\",\n            \"Calculate the daily interest rate by dividing APR by 365\",\n            \"Store the calculated daily interest rate for future calculations\"\n        ]\n    },\n    {\n        \"element\": \"calculateInterest\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each eligible account:\",\n            \"   - Retrieve the account balance and interest rate\",\n            \"   - Calculate the monthly interest by multiplying the balance with the monthly interest rate\",\n            \"   - Add the monthly interest to the account balance\",\n            \"   - Calculate the cumulative interest by summing up all monthly interests\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Identify Eligible Transactions",
            "pseudocode": "Retrieve all transactions from the database\nFilter transactions based on predefined criteria for daily interest calculation\nCriteria may include transaction type, date range, account status, etc.\nStore the eligible transactions in a separate list or data structure",
            "standard": "OpenAPI"
          },
          {
            "element": "Apply Interest Calculation",
            "pseudocode": "For each eligible transaction identified:\nCalculate daily interest based on transaction amount and interest rate\nUpdate the transaction with the calculated interest amount\nStore the updated transaction back in the database",
            "standard": "BIAN"
          },
          {
            "element": "Update Transaction Status",
            "pseudocode": "For each transaction processed for interest calculation:\nCheck if the interest application was successful\nUpdate the transaction status based on the outcome (success/failure)\nLog any errors or exceptions encountered during the process",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Identify Eligible Transactions\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve all transactions from the database\",\n            \"Filter transactions based on predefined criteria for daily interest calculation\",\n            \"Criteria may include transaction type, date range, account status, etc.\",\n            \"Store the eligible transactions in a separate list or data structure\"\n        ]\n    },\n    {\n        \"element\": \"Apply Interest Calculation\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each eligible transaction identified:\",\n            \"Calculate daily interest based on transaction amount and interest rate\",\n            \"Update the transaction with the calculated interest amount\",\n            \"Store the updated transaction back in the database\"\n        ]\n    },\n    {\n        \"element\": \"Update Transaction Status\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"For each transaction processed for interest calculation:\",\n            \"Check if the interest application was successful\",\n            \"Update the transaction status based on the outcome (success/failure)\",\n            \"Log any errors or exceptions encountered during the process\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Calculate Interest Business Logic",
            "pseudocode": "1. Check if the previous payment was a full payment\n2. Calculate interest if previous payment was not a full payment\n3. Retrieve transaction details\n4. Calculate interest amount\n5. Display card number and calculated interest amount",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Calculate Interest Business Logic\",\n        \"standard\": \"ISO 10962\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Check if the previous payment was a full payment\",\n                \"logic\": \"Retrieve the payment history for the card number and determine if the last payment was a full payment\"\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Calculate interest if previous payment was not a full payment\",\n                \"logic\": \"If the previous payment was not a full payment, proceed to calculate interest for the transaction\"\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Retrieve transaction details\",\n                \"logic\": \"Get the balance, daily rate, and days since the transaction date for the transaction\"\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Calculate interest amount\",\n                \"logic\": \"Use the formula: interest = balance * daily rate * days\"\n            },\n            {\n                \"step\": 5,\n                \"description\": \"Display card number and calculated interest amount\",\n                \"logic\": \"Output the card number and the calculated interest amount for the transaction\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "calculatePremium",
            "pseudocode": "1. Receive policy details including coverage, risk factors, and customer information. \n2. Perform dynamic risk assessment based on the provided data. \n3. Integrate real-time data sources to adjust premium calculations. \n4. Calculate the premium amount considering the risk assessment and data integration. \n5. Generate a detailed breakdown display showing how the premium is calculated. \n6. Handle complex cases such as multiple coverages or special conditions. \n7. Trigger on-demand policy document events if required.",
            "standard": "OpenAPI"
          },
          {
            "element": "calculatePremium",
            "pseudocode": "1. Identify the policy details entity and its attributes. \n2. Determine the risk assessment process entity and its factors. \n3. Access real-time data integration services entity. \n4. Define the premium calculation algorithm entity. \n5. Specify the breakdown display entity. \n6. Manage complex cases entity. \n7. Implement on-demand policy document events entity.",
            "standard": "BIAN"
          },
          {
            "element": "calculatePremium",
            "pseudocode": "1. Define the inputs required for premium calculation. \n2. Establish a risk assessment methodology. \n3. Ensure real-time data integration compliance. \n4. Calculate premium using standardized formulas. \n5. Present detailed breakdown following ISO guidelines. \n6. Address complex cases according to ISO standards. \n7. Manage on-demand policy document events in a secure and auditable manner.",
            "standard": "ISO"
          },
          {
            "element": "trackTimingsSLA",
            "pseudocode": "1. Record the start timestamp when the SLA begins. \n2. Record the end timestamp when the SLA ends. \n3. Calculate the elapsed time by subtracting the start time from the end time. \n4. Convert the elapsed time to milliseconds for accuracy.",
            "standard": "OpenAPI"
          },
          {
            "element": "trackTimingsSLA",
            "pseudocode": "1. Define the start timestamp attribute. \n2. Define the end timestamp attribute. \n3. Calculate the elapsed time by subtracting start time from end time. \n4. Convert the elapsed time to milliseconds.",
            "standard": "BIAN"
          },
          {
            "element": "trackTimingsSLA",
            "pseudocode": "1. Capture the start timestamp following ISO time format. \n2. Capture the end timestamp following ISO time format. \n3. Calculate elapsed time using ISO time standards. \n4. Convert the elapsed time to milliseconds as per ISO guidelines.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"calculatePremium\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"1. Receive policy details including coverage, risk factors, and customer information. \\n2. Perform dynamic risk assessment based on the provided data. \\n3. Integrate real-time data sources to adjust premium calculations. \\n4. Calculate the premium amount considering the risk assessment and data integration. \\n5. Generate a detailed breakdown display showing how the premium is calculated. \\n6. Handle complex cases such as multiple coverages or special conditions. \\n7. Trigger on-demand policy document events if required.\"\n    },\n    {\n        \"element\": \"calculatePremium\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": \"1. Identify the policy details entity and its attributes. \\n2. Determine the risk assessment process entity and its factors. \\n3. Access real-time data integration services entity. \\n4. Define the premium calculation algorithm entity. \\n5. Specify the breakdown display entity. \\n6. Manage complex cases entity. \\n7. Implement on-demand policy document events entity.\"\n    },\n    {\n        \"element\": \"calculatePremium\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": \"1. Define the inputs required for premium calculation. \\n2. Establish a risk assessment methodology. \\n3. Ensure real-time data integration compliance. \\n4. Calculate premium using standardized formulas. \\n5. Present detailed breakdown following ISO guidelines. \\n6. Address complex cases according to ISO standards. \\n7. Manage on-demand policy document events in a secure and auditable manner.\"\n    },\n    {\n        \"element\": \"trackTimingsSLA\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": \"1. Record the start timestamp when the SLA begins. \\n2. Record the end timestamp when the SLA ends. \\n3. Calculate the elapsed time by subtracting the start time from the end time. \\n4. Convert the elapsed time to milliseconds for accuracy.\"\n    },\n    {\n        \"element\": \"trackTimingsSLA\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": \"1. Define the start timestamp attribute. \\n2. Define the end timestamp attribute. \\n3. Calculate the elapsed time by subtracting start time from end time. \\n4. Convert the elapsed time to milliseconds.\"\n    },\n    {\n        \"element\": \"trackTimingsSLA\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": \"1. Capture the start timestamp following ISO time format. \\n2. Capture the end timestamp following ISO time format. \\n3. Calculate elapsed time using ISO time standards. \\n4. Convert the elapsed time to milliseconds as per ISO guidelines.\"\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Select Coverage Options",
            "pseudocode": "Retrieve list of available coverage options from the insurance provider's API\nDisplay the list of coverage options to the insurance agent\nAllow the insurance agent to select one or more coverage options",
            "standard": "OpenAPI"
          },
          {
            "element": "Select Deductible Options",
            "pseudocode": "Retrieve list of available deductible options from the insurance provider's system\nDisplay the list of deductible options to the insurance agent\nAllow the insurance agent to select a deductible option",
            "standard": "BIAN"
          },
          {
            "element": "Customize Insurance Quote",
            "pseudocode": "Calculate the insurance premium based on the selected coverage options and deductible\nApply any discounts or surcharges based on the policyholder's profile\nGenerate a customized insurance quote for the potential policyholder",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Select Coverage Options\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve list of available coverage options from the insurance provider's API\",\n            \"Display the list of coverage options to the insurance agent\",\n            \"Allow the insurance agent to select one or more coverage options\"\n        ]\n    },\n    {\n        \"element\": \"Select Deductible Options\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Retrieve list of available deductible options from the insurance provider's system\",\n            \"Display the list of deductible options to the insurance agent\",\n            \"Allow the insurance agent to select a deductible option\"\n        ]\n    },\n    {\n        \"element\": \"Customize Insurance Quote\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Calculate the insurance premium based on the selected coverage options and deductible\",\n            \"Apply any discounts or surcharges based on the policyholder's profile\",\n            \"Generate a customized insurance quote for the potential policyholder\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "generateInsuranceQuote",
            "pseudocode": "1. Retrieve property and risk data from user input\n2. Validate the input data\n3. Calculate insurance quote\n4. Generate quote response\n5. Ensure timely response",
            "standard": "OpenAPI"
          },
          {
            "element": "validateAndSanitizeInputs",
            "pseudocode": "1. Validate input data\n2. Sanitize input data\n3. Ensure security",
            "standard": "ISO"
          },
          {
            "element": "enforceAuthenticationAuthorization",
            "pseudocode": "1. Authenticate user\n2. Authorize access\n3. Enforce access control",
            "standard": "BIAN"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"generateInsuranceQuote\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": \"Retrieve property and risk data from user input\",\n                \"action\": \"Get property details and risk factors from the user\"\n            },\n            {\n                \"step\": \"Validate the input data\",\n                \"action\": \"Check if all required fields are present and in the correct format\"\n            },\n            {\n                \"step\": \"Calculate insurance quote\",\n                \"action\": \"Use the property and risk data to calculate the insurance premium\"\n            },\n            {\n                \"step\": \"Generate quote response\",\n                \"action\": \"Format the calculated premium into a quote response for the user\"\n            },\n            {\n                \"step\": \"Ensure timely response\",\n                \"action\": \"Implement a mechanism to respond within 5 minutes\"\n            }\n        ]\n    },\n    {\n        \"element\": \"validateAndSanitizeInputs\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            {\n                \"step\": \"Validate input data\",\n                \"action\": \"Check for data integrity, format, and completeness\"\n            },\n            {\n                \"step\": \"Sanitize input data\",\n                \"action\": \"Remove any potentially harmful or unnecessary characters\"\n            },\n            {\n                \"step\": \"Ensure security\",\n                \"action\": \"Implement measures to prevent injection attacks and data breaches\"\n            }\n        ]\n    },\n    {\n        \"element\": \"enforceAuthenticationAuthorization\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            {\n                \"step\": \"Authenticate user\",\n                \"action\": \"Verify user identity through credentials or tokens\"\n            },\n            {\n                \"step\": \"Authorize access\",\n                \"action\": \"Check user permissions to ensure access to the system\"\n            },\n            {\n                \"step\": \"Enforce access control\",\n                \"action\": \"Implement role-based access control to restrict unauthorized actions\"\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Generate Document for Quote",
            "pseudocode": "1. Retrieve completed quote details\n    - Query database for quote details based on quote ID\n2. Format quote details into a PDF document\n    - Create a new PDF document\n    - Populate the document with quote details such as client information, products/services, pricing, and terms\n    - Add necessary styling and formatting to the document\n3. Make the PDF document downloadable\n    - Generate a unique download link for the PDF document\n    - Provide the link to the user for download",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Generate Document for Quote\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Retrieve completed quote details\",\n                \"actions\": [\n                    \"Query database for quote details based on quote ID\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Format quote details into a PDF document\",\n                \"actions\": [\n                    \"Create a new PDF document\",\n                    \"Populate the document with quote details such as client information, products/services, pricing, and terms\",\n                    \"Add necessary styling and formatting to the document\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Make the PDF document downloadable\",\n                \"actions\": [\n                    \"Generate a unique download link for the PDF document\",\n                    \"Provide the link to the user for download\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Retrieve Account Data",
            "pseudocode": "For each customer account in the batch processing data:\n1. Retrieve account information such as account number, balance, and transaction history.\n2. Store the account data in memory for processing.",
            "standard": "OpenAPI"
          },
          {
            "element": "Determine Applicable Interest Rates",
            "pseudocode": "For each account type:\n1. Check the account type to determine the applicable interest rate category.\n2. Retrieve the interest rate based on the category from the interest rate table.",
            "standard": "BIAN"
          },
          {
            "element": "Compute Monthly Interest",
            "pseudocode": "For each account in the batch processing data:\n1. Calculate the daily interest rate based on the annual interest rate and number of days in the month.\n2. Compute the monthly interest by multiplying the daily interest rate with the account balance.",
            "standard": "ISO"
          },
          {
            "element": "Update Account Balances",
            "pseudocode": "For each account in the batch processing data:\n1. Add the computed monthly interest to the account balance.\n2. Update the account balance in the system with the new balance.",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Retrieve Account Data\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each customer account in the batch processing data:\",\n            \"1. Retrieve account information such as account number, balance, and transaction history.\",\n            \"2. Store the account data in memory for processing.\"\n        ]\n    },\n    {\n        \"element\": \"Determine Applicable Interest Rates\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"For each account type:\",\n            \"1. Check the account type to determine the applicable interest rate category.\",\n            \"2. Retrieve the interest rate based on the category from the interest rate table.\"\n        ]\n    },\n    {\n        \"element\": \"Compute Monthly Interest\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"For each account in the batch processing data:\",\n            \"1. Calculate the daily interest rate based on the annual interest rate and number of days in the month.\",\n            \"2. Compute the monthly interest by multiplying the daily interest rate with the account balance.\"\n        ]\n    },\n    {\n        \"element\": \"Update Account Balances\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"For each account in the batch processing data:\",\n            \"1. Add the computed monthly interest to the account balance.\",\n            \"2. Update the account balance in the system with the new balance.\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Adjust Credit Line Business Rule",
            "pseudocode": "Retrieve customer information including credit score, payment history, and current credit line\nEvaluate predefined rules and criteria for credit line adjustment\nIf customer credit score is above a certain threshold and payment history is good:\n- Increase credit line by a certain percentage\nElse if customer credit score is below a certain threshold or payment history is poor:\n- Decrease credit line by a certain percentage\nUpdate customer's credit line in the system\nLog the credit line adjustment with timestamp and reason",
            "standard": "BIAN"
          },
          {
            "element": "Real-Time Credit Line Update Flow",
            "pseudocode": "Listen for market changes and customer needs triggers\nWhen triggered, call adjustCreditLine function with customer ID\nAdjust Credit Line Business Rule is executed\nCustomer's credit line is dynamically updated\nSend notification to customer about the credit line change",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Adjust Credit Line Business Rule\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Retrieve customer information including credit score, payment history, and current credit line\",\n            \"Evaluate predefined rules and criteria for credit line adjustment\",\n            \"If customer credit score is above a certain threshold and payment history is good:\",\n            \"   - Increase credit line by a certain percentage\",\n            \"Else if customer credit score is below a certain threshold or payment history is poor:\",\n            \"   - Decrease credit line by a certain percentage\",\n            \"Update customer's credit line in the system\",\n            \"Log the credit line adjustment with timestamp and reason\"\n        ]\n    },\n    {\n        \"element\": \"Real-Time Credit Line Update Flow\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Listen for market changes and customer needs triggers\",\n            \"When triggered, call adjustCreditLine function with customer ID\",\n            \"Adjust Credit Line Business Rule is executed\",\n            \"Customer's credit line is dynamically updated\",\n            \"Send notification to customer about the credit line change\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "parseCsvInput",
            "pseudocode": "1. Read the CSV file provided as input\n    - Open the CSV file\n    - Read the contents line by line\n2. Parse each line to extract structured fields\n    - Split each line based on the CSV delimiter\n    - Map each field to its corresponding data structure\n3. Validate the extracted fields\n    - Check for required fields\n    - Validate data format and integrity\n4. Organize the parsed data for further processing\n    - Create a structured data object\n    - Store the parsed fields in the appropriate data structures",
            "standard": "OpenAPI"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"parseCsvInput\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": 1,\n                \"description\": \"Read the CSV file provided as input\",\n                \"actions\": [\n                    \"Open the CSV file\",\n                    \"Read the contents line by line\"\n                ]\n            },\n            {\n                \"step\": 2,\n                \"description\": \"Parse each line to extract structured fields\",\n                \"actions\": [\n                    \"Split each line based on the CSV delimiter\",\n                    \"Map each field to its corresponding data structure\"\n                ]\n            },\n            {\n                \"step\": 3,\n                \"description\": \"Validate the extracted fields\",\n                \"actions\": [\n                    \"Check for required fields\",\n                    \"Validate data format and integrity\"\n                ]\n            },\n            {\n                \"step\": 4,\n                \"description\": \"Organize the parsed data for further processing\",\n                \"actions\": [\n                    \"Create a structured data object\",\n                    \"Store the parsed fields in the appropriate data structures\"\n                ]\n            }\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Data Model",
            "pseudocode": "Define the data structure for a completed insurance quote including fields like customer information, policy details, coverage options, premium amount, etc.",
            "standard": "ISO"
          },
          {
            "element": "API Endpoint",
            "pseudocode": "Create an API endpoint '/generateQuoteDocument' that accepts a POST request with the completed quote data as input\nValidate the input data to ensure it meets the required format and contains all necessary information\nGenerate a unique identifier for the quote document to be created",
            "standard": "OpenAPI"
          },
          {
            "element": "PDF Generation",
            "pseudocode": "Retrieve the quote details from the input data\nFormat the quote details into a structured PDF document template\nInclude the necessary styling and branding elements in the PDF document\nAdd the quote details to the PDF document content\nGenerate a downloadable link for the PDF document",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Data Model\",\n        \"standard\": \"ISO 25024:2015\",\n        \"pseudocode\": [\n            \"Define the data structure for a completed insurance quote including fields like customer information, policy details, coverage options, premium amount, etc.\"\n        ]\n    },\n    {\n        \"element\": \"API Endpoint\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Create an API endpoint '/generateQuoteDocument' that accepts a POST request with the completed quote data as input\",\n            \"Validate the input data to ensure it meets the required format and contains all necessary information\",\n            \"Generate a unique identifier for the quote document to be created\"\n        ]\n    },\n    {\n        \"element\": \"PDF Generation\",\n        \"standard\": \"ISO 32000-1:2008\",\n        \"pseudocode\": [\n            \"Retrieve the quote details from the input data\",\n            \"Format the quote details into a structured PDF document template\",\n            \"Include the necessary styling and branding elements in the PDF document\",\n            \"Add the quote details to the PDF document content\",\n            \"Generate a downloadable link for the PDF document\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "integrateWithManufacturingPartner",
            "pseudocode": "Step 1: Retrieve finalized card details from the system.\nStep 2: Check customer approval status for the card production process.\nStep 3: If approved, initiate the process of sending card details to the manufacturing partner.\nStep 4: Generate a request to the manufacturing partner for immediate production and dispatch.\nStep 5: Monitor the production and delivery process in real-time.\nStep 6: Notify the customer once the card is dispatched for quick receipt.",
            "standard": "OpenAPI"
          },
          {
            "element": "authenticateAuthorization",
            "pseudocode": "Step 1: Receive a request to send card details to the manufacturing partner.\nStep 2: Verify the user's authentication credentials for access to the system.\nStep 3: Authenticate the user's authorization level for sending card details.\nStep 4: Check if the user has the necessary permissions to proceed.\nStep 5: If authorized, proceed with sending card details to the manufacturing partner.",
            "standard": "ISO"
          },
          {
            "element": "validateSanitizeInputs",
            "pseudocode": "Step 1: Receive input data related to card details for production.\nStep 2: Validate the input data format, length, and required fields.\nStep 3: Sanitize the input data to remove any potentially harmful characters or scripts.\nStep 4: Ensure data integrity by checking for any anomalies or discrepancies.\nStep 5: Prepare the sanitized input data for sending to the manufacturing partner.",
            "standard": "BIAN"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"integrateWithManufacturingPartner\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Step 1: Retrieve finalized card details from the system.\",\n            \"Step 2: Check customer approval status for the card production process.\",\n            \"Step 3: If approved, initiate the process of sending card details to the manufacturing partner.\",\n            \"Step 4: Generate a request to the manufacturing partner for immediate production and dispatch.\",\n            \"Step 5: Monitor the production and delivery process in real-time.\",\n            \"Step 6: Notify the customer once the card is dispatched for quick receipt.\"\n        ]\n    },\n    {\n        \"element\": \"authenticateAuthorization\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Step 1: Receive a request to send card details to the manufacturing partner.\",\n            \"Step 2: Verify the user's authentication credentials for access to the system.\",\n            \"Step 3: Authenticate the user's authorization level for sending card details.\",\n            \"Step 4: Check if the user has the necessary permissions to proceed.\",\n            \"Step 5: If authorized, proceed with sending card details to the manufacturing partner.\"\n        ]\n    },\n    {\n        \"element\": \"validateSanitizeInputs\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Step 1: Receive input data related to card details for production.\",\n            \"Step 2: Validate the input data format, length, and required fields.\",\n            \"Step 3: Sanitize the input data to remove any potentially harmful characters or scripts.\",\n            \"Step 4: Ensure data integrity by checking for any anomalies or discrepancies.\",\n            \"Step 5: Prepare the sanitized input data for sending to the manufacturing partner.\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Read input fields from CSV file",
            "pseudocode": "Open the CSV file for reading\nLoop through each row in the CSV file\nExtract relevant input fields such as customer information, property details, and policy options",
            "standard": "OpenAPI"
          },
          {
            "element": "Parse protective device info",
            "pseudocode": "Check if protective device information is provided in the input data\nIf provided, parse the details such as type, installation date, and functionality\nMap the parsed information to corresponding fields for further processing",
            "standard": "ISO"
          },
          {
            "element": "Prefill missing data for underwriting",
            "pseudocode": "Identify missing data fields required for underwriting\nRetrieve relevant data from external sources or default values\nFill in the missing data fields in the input dataset",
            "standard": "BIAN"
          },
          {
            "element": "Underwrite based on Wisconsin rules",
            "pseudocode": "Retrieve underwriting guidelines specific to Wisconsin\nEvaluate the input data against the rules and criteria\nDetermine the eligibility and risk factors for the policy",
            "standard": "OpenAPI"
          },
          {
            "element": "Rate policy using various factors",
            "pseudocode": "Define rating factors such as location, coverage type, and deductible\nCalculate the base rate and apply adjustments based on the factors\nDetermine the final rate for the policy",
            "standard": "ISO"
          },
          {
            "element": "Calculate premium",
            "pseudocode": "Combine the base rate with additional fees and discounts\nCalculate the total premium amount for the policy",
            "standard": "BIAN"
          },
          {
            "element": "Generate quote with premium details",
            "pseudocode": "Format the quote with detailed information including coverage, premium, and terms\nInclude breakdown of premium components such as base rate, fees, and discounts\nGenerate a structured JSON output for the quote",
            "standard": "OpenAPI"
          },
          {
            "element": "Apply discounts",
            "pseudocode": "Check for eligibility of various discount types such as bundling, safety features, or loyalty\nApply applicable discounts to the premium calculation\nAdjust the final premium amount based on the discounts",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Read input fields from CSV file\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Open the CSV file for reading\",\n            \"Loop through each row in the CSV file\",\n            \"Extract relevant input fields such as customer information, property details, and policy options\"\n        ]\n    },\n    {\n        \"element\": \"Parse protective device info\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Check if protective device information is provided in the input data\",\n            \"If provided, parse the details such as type, installation date, and functionality\",\n            \"Map the parsed information to corresponding fields for further processing\"\n        ]\n    },\n    {\n        \"element\": \"Prefill missing data for underwriting\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Identify missing data fields required for underwriting\",\n            \"Retrieve relevant data from external sources or default values\",\n            \"Fill in the missing data fields in the input dataset\"\n        ]\n    },\n    {\n        \"element\": \"Underwrite based on Wisconsin rules\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve underwriting guidelines specific to Wisconsin\",\n            \"Evaluate the input data against the rules and criteria\",\n            \"Determine the eligibility and risk factors for the policy\"\n        ]\n    },\n    {\n        \"element\": \"Rate policy using various factors\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Define rating factors such as location, coverage type, and deductible\",\n            \"Calculate the base rate and apply adjustments based on the factors\",\n            \"Determine the final rate for the policy\"\n        ]\n    },\n    {\n        \"element\": \"Calculate premium\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Combine the base rate with additional fees and discounts\",\n            \"Calculate the total premium amount for the policy\"\n        ]\n    },\n    {\n        \"element\": \"Generate quote with premium details\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Format the quote with detailed information including coverage, premium, and terms\",\n            \"Include breakdown of premium components such as base rate, fees, and discounts\",\n            \"Generate a structured JSON output for the quote\"\n        ]\n    },\n    {\n        \"element\": \"Apply discounts\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Check for eligibility of various discount types such as bundling, safety features, or loyalty\",\n            \"Apply applicable discounts to the premium calculation\",\n            \"Adjust the final premium amount based on the discounts\"\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Read input fields from CSV file",
            "pseudocode": "Open the CSV file for reading\nLoop through each row in the CSV file\nExtract relevant input fields such as customer information, property details, and policy options",
            "standard": "OpenAPI"
          },
          {
            "element": "Parse protective device info",
            "pseudocode": "Check if protective device information is provided in the input data\nIf provided, parse the details such as type, installation date, and functionality\nMap the parsed information to corresponding fields for further processing",
            "standard": "ISO"
          },
          {
            "element": "Prefill missing data for underwriting",
            "pseudocode": "Identify missing data fields required for underwriting\nRetrieve relevant data from external sources or default values\nFill in the missing data fields in the input dataset",
            "standard": "BIAN"
          },
          {
            "element": "Underwrite based on Wisconsin rules",
            "pseudocode": "Retrieve underwriting guidelines specific to Wisconsin\nEvaluate the input data against the rules and criteria\nDetermine the eligibility and risk factors for the policy",
            "standard": "OpenAPI"
          },
          {
            "element": "Rate policy using various factors",
            "pseudocode": "Define rating factors such as location, coverage type, and deductible\nCalculate the base rate and apply adjustments based on the factors\nDetermine the final rate for the policy",
            "standard": "ISO"
          },
          {
            "element": "Calculate premium",
            "pseudocode": "Combine the base rate with additional fees and discounts\nCalculate the total premium amount for the policy",
            "standard": "BIAN"
          },
          {
            "element": "Generate quote with premium details",
            "pseudocode": "Format the quote with detailed information including coverage, premium, and terms\nInclude breakdown of premium components such as base rate, fees, and discounts\nGenerate a structured JSON output for the quote",
            "standard": "OpenAPI"
          },
          {
            "element": "Apply discounts",
            "pseudocode": "Check for eligibility of various discount types such as bundling, safety features, or loyalty\nApply applicable discounts to the premium calculation\nAdjust the final premium amount based on the discounts",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Read input fields from CSV file\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Open the CSV file for reading\",\n            \"Loop through each row in the CSV file\",\n            \"Extract relevant input fields such as customer information, property details, and policy options\"\n        ]\n    },\n    {\n        \"element\": \"Parse protective device info\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Check if protective device information is provided in the input data\",\n            \"If provided, parse the details such as type, installation date, and functionality\",\n            \"Map the parsed information to corresponding fields for further processing\"\n        ]\n    },\n    {\n        \"element\": \"Prefill missing data for underwriting\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Identify missing data fields required for underwriting\",\n            \"Retrieve relevant data from external sources or default values\",\n            \"Fill in the missing data fields in the input dataset\"\n        ]\n    },\n    {\n        \"element\": \"Underwrite based on Wisconsin rules\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Retrieve underwriting guidelines specific to Wisconsin\",\n            \"Evaluate the input data against the rules and criteria\",\n            \"Determine the eligibility and risk factors for the policy\"\n        ]\n    },\n    {\n        \"element\": \"Rate policy using various factors\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Define rating factors such as location, coverage type, and deductible\",\n            \"Calculate the base rate and apply adjustments based on the factors\",\n            \"Determine the final rate for the policy\"\n        ]\n    },\n    {\n        \"element\": \"Calculate premium\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Combine the base rate with additional fees and discounts\",\n            \"Calculate the total premium amount for the policy\"\n        ]\n    },\n    {\n        \"element\": \"Generate quote with premium details\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Format the quote with detailed information including coverage, premium, and terms\",\n            \"Include breakdown of premium components such as base rate, fees, and discounts\",\n            \"Generate a structured JSON output for the quote\"\n        ]\n    },\n    {\n        \"element\": \"Apply discounts\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Check for eligibility of various discount types such as bundling, safety features, or loyalty\",\n            \"Apply applicable discounts to the premium calculation\",\n            \"Adjust the final premium amount based on the discounts\"\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "Integrate with Credit Decision Engine",
            "pseudocode": "Step 1: Retrieve flagged account information from the charged-off account management system.\nStep 2: Send the account information to the credit decision engine for risk assessment.\nStep 3: Receive risk assessment and decision from the credit decision engine.\nStep 4: Update the system with the risk assessment and decision for the flagged account.",
            "standard": "OpenAPI"
          },
          {
            "element": "Flag Account for Potential Charge-Off",
            "pseudocode": "Step 1: Identify accounts that meet the criteria for potential charge-off.\nStep 2: Flag the account for potential charge-off in the system.",
            "standard": "BIAN"
          },
          {
            "element": "Evaluate Account with Credit Decision Engine",
            "pseudocode": "Step 1: Retrieve account information for evaluation.\nStep 2: Perform risk assessment using credit decision engine.\nStep 3: Determine the decision based on the risk assessment.\nStep 4: Return the decision for the account.",
            "standard": "ISO"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"Integrate with Credit Decision Engine\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            \"Step 1: Retrieve flagged account information from the charged-off account management system.\",\n            \"Step 2: Send the account information to the credit decision engine for risk assessment.\",\n            \"Step 3: Receive risk assessment and decision from the credit decision engine.\",\n            \"Step 4: Update the system with the risk assessment and decision for the flagged account.\"\n        ]\n    },\n    {\n        \"element\": \"Flag Account for Potential Charge-Off\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            \"Step 1: Identify accounts that meet the criteria for potential charge-off.\",\n            \"Step 2: Flag the account for potential charge-off in the system.\"\n        ]\n    },\n    {\n        \"element\": \"Evaluate Account with Credit Decision Engine\",\n        \"standard\": \"ISO\",\n        \"pseudocode\": [\n            \"Step 1: Retrieve account information for evaluation.\",\n            \"Step 2: Perform risk assessment using credit decision engine.\",\n            \"Step 3: Determine the decision based on the risk assessment.\",\n            \"Step 4: Return the decision for the account.\"\n        ]\n    }\n]\n```"
      },
      "pseudocode": ""
    },
    {
      "businessLogic": {
        "design": [
          {
            "element": "readTransactionCategoryBalanceRecords",
            "pseudocode": "1. Retrieve necessary files for input\n    - Open the file containing transaction category balance records\n    - Read the data from the file\n2. Process transaction category balance records\n    - Parse the data to extract transaction category balances\n    - Store the balances in a data structure for further processing\n3. Return the transaction category balance records\n    - Provide the extracted balances to the calling function",
            "standard": "OpenAPI"
          },
          {
            "element": "updateAccountBalancesWithInterest",
            "pseudocode": "1. Retrieve transaction data for interest calculation\n    - Fetch transaction data related to account balances and interest rates\n2. Calculate interest for each account\n    - For each account, calculate interest based on the transaction data and interest rates\n    - Update the account balance with the calculated interest\n3. Update account balances\n    - Store the updated account balances in the system",
            "standard": "BIAN"
          }
        ],
        "raw": "```json\n[\n    {\n        \"element\": \"readTransactionCategoryBalanceRecords\",\n        \"standard\": \"Open API\",\n        \"pseudocode\": [\n            {\n                \"step\": \"Retrieve necessary files for input\",\n                \"actions\": [\n                    \"Open the file containing transaction category balance records\",\n                    \"Read the data from the file\"\n                ]\n            },\n            {\n                \"step\": \"Process transaction category balance records\",\n                \"actions\": [\n                    \"Parse the data to extract transaction category balances\",\n                    \"Store the balances in a data structure for further processing\"\n                ]\n            },\n            {\n                \"step\": \"Return the transaction category balance records\",\n                \"actions\": [\n                    \"Provide the extracted balances to the calling function\"\n                ]\n            }\n        ]\n    },\n    {\n        \"element\": \"updateAccountBalancesWithInterest\",\n        \"standard\": \"Bian\",\n        \"pseudocode\": [\n            {\n                \"step\": \"Retrieve transaction data for interest calculation\",\n                \"actions\": [\n                    \"Fetch transaction data related to account balances and interest rates\"\n                ]\n            },\n            {\n                \"step\": \"Calculate interest for each account\",\n                \"actions\": [\n                    \"For each account, calculate interest based on the transaction data and interest rates\",\n                    \"Update the account balance with the calculated interest\"\n                ]\n            },\n            {\n                \"step\": \"Update account balances\",\n                \"actions\": [\n                    \"Store the updated account balances in the system\"\n                ]\n            }\n        ]\n    }\n]\n```  "
      },
      "pseudocode": ""
    }
  ]
}