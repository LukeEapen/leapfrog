<!-- Shared Chat Panel (POC4) - Look & feel based on POC 3b -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<style>
{% raw %}
  #chatPanel{position:fixed;bottom:24px;right:24px;width:380px;max-height:70vh;background:#ffffff;border:1px solid #d0d5da;border-radius:18px;box-shadow:0 8px 28px -6px rgba(0,0,0,.25);display:flex;flex-direction:column;overflow:hidden;z-index:1050;font-size:.9rem}
  #chatPanel.collapsed{height:54px;max-height:54px}
  #chatHeader{background:#23272b;color:#fff;padding:.65rem .9rem;display:flex;align-items:center;justify-content:space-between;cursor:pointer;font-weight:600}
  #chatMessages{flex:1;overflow-y:auto;padding:.75rem;display:flex;flex-direction:column;gap:.6rem;background:#f5f7f9}
  .chat-msg{padding:.55rem .7rem;border-radius:10px;line-height:1.25;max-width:88%;word-break:break-word}
  .chat-user{background:#d32f2f;color:#fff;align-self:flex-end}
  .chat-assistant{background:#ffffff;border:1px solid #d0d5da;align-self:flex-start}
  #chatForm{border-top:1px solid #e1e5e8;display:flex;gap:.5rem;padding:.55rem .6rem;background:#fff}
  #chatForm textarea{flex:1;resize:none;border:1px solid #c9d0d6;border-radius:8px;padding:.45rem .6rem;font-size:.85rem;max-height:110px}
  #applyResponseBtn{margin-left:.35rem}
  .apply-indicator{font-size:.65rem;color:#13803b;font-weight:600;display:none;margin-left:6px}
  @media (max-width:700px){
    #chatPanel{right:8px;left:8px;width:auto}
  }
{% endraw %}
</style>

<div id="chatPanel" class="collapsed" aria-live="polite" aria-label="Assistant Chat Panel">
  <div id="chatHeader">
    <span><i class="bi bi-robot"></i> Assistant</span>
    <span class="small">click to expand/collapse</span>
  </div>
  <div id="chatMessages">
    <div class="chat-msg chat-assistant">Hi! I can help operate this page. Try commands like “next”, “minimize legacy”, “filter source off”, or ask a question.</div>
  </div>
  <form id="chatForm">
    <textarea id="chatInput" rows="2" placeholder="Type a command or question..."></textarea>
    <div class="d-flex flex-column align-items-stretch">
      <button type="submit" id="sendChatBtn" class="btn btn-danger btn-sm">Send</button>
      <button type="button" id="applyResponseBtn" class="btn btn-outline-success btn-sm mt-1" title="Apply last action">Apply</button>
      <span id="applyIndicator" class="apply-indicator">Ready to apply</span>
    </div>
  </form>
</div>

<script>
(function(){
  const panel = document.getElementById('chatPanel');
  const header = document.getElementById('chatHeader');
  const messages = document.getElementById('chatMessages');
  const form = document.getElementById('chatForm');
  const input = document.getElementById('chatInput');
  const applyBtn = document.getElementById('applyResponseBtn');
  const applyInd = document.getElementById('applyIndicator');
  let lastAction = null;

  function append(role, text){
    const div = document.createElement('div');
    div.className = 'chat-msg ' + (role==='user' ? 'chat-user' : 'chat-assistant');
    div.textContent = text;
    messages.appendChild(div);
    messages.scrollTop = messages.scrollHeight;
  }
  function setLastAction(fn){ lastAction = (typeof fn==='function') ? fn : null; applyInd.style.display = lastAction ? 'inline' : 'none'; }
  function runLastAction(){ if(lastAction){ try{ lastAction(); }catch(e){} } }
  function toggle(){ panel.classList.toggle('collapsed'); }

  header.addEventListener('click', toggle);
  applyBtn.addEventListener('click', runLastAction);

  async function fallbackServer(text){
    try{
      const res = await fetch('/poc4/chat', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: 'message='+encodeURIComponent(text)});
      const data = await res.json();
      append('assistant', data.response || '(no response)');
      // No structured update from server; keep any previously parsed action
    }catch(err){ append('assistant','(error)'); }
  }

  async function onSubmit(e){
    e.preventDefault();
    const text = (input.value||'').trim(); if(!text) return false;
    append('user', text); input.value='';
    let handled = false;
    if(typeof window.handleChatCommand === 'function'){
      try{ handled = !!window.handleChatCommand(text, { append, setLastAction }); }catch(_){}
    }
    if(!handled){ await fallbackServer(text); }
    return false;
  }
  form.addEventListener('submit', onSubmit);

  // Expose tiny API for pages to use
  window.ChatPanel = {
    append,
    setLastAction,
    clearLast(){ setLastAction(null); },
    runLast: runLastAction
  };
})();
</script>